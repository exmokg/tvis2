#–ò–º–ø–æ—Ä—Ç—ã
# -*-coding: utf-8 -*-

import aiogram
import asyncio
import sqlite3
import random
from random import randint
import logging
import time
from asyncio import sleep
from datetime import datetime, timedelta
from time import gmtime, strftime, localtime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import os, re, configparser, requests
from aiogram.types import ContentType
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.handler import CancelHandler, current_handler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import quote_html
from aiogram.utils.exceptions import Throttled
import psutil
import config
import users
import chats

class ChRass(StatesGroup):
    msg = State()

class Rass(StatesGroup):
    msg = State()

class Quest(StatesGroup):
    msg = State()

#–ë–æ—Ç
bot = aiogram.Bot(config.bot_token, parse_mode='HTML')
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)


def rate_limit(limit, key=None):
    def decorator(func):
        setattr(func, 'throttling_rate_limit', limit)
        if key:
            setattr(func, 'throttling_key', key)
        return func

    return decorator


class ThrottlingMiddleware(BaseMiddleware):
    def __init__(self, limit=0, key_prefix='antiflood_'):
        self.rate_limit = limit
        self.prefix = key_prefix
        super(ThrottlingMiddleware, self).__init__()

    async def on_process_message(self, message, data):
        handler = current_handler.get()
        dispatcher = Dispatcher.get_current()
        
        if handler:
            limit = getattr(handler, 'throttling_rate_limit', self.rate_limit)
            key = getattr(handler, 'throttling_key', f"{self.prefix}_{handler.__name__}")
        else:
            limit = self.rate_limit
            key = f"{self.prefix}_message"

        if limit <= 0:
            return

        try:
            await dispatcher.throttle(key, rate=limit)
        except Throttled as t:
            await self.message_throttled(message, t)
            raise CancelHandler()

    async def message_throttled(self, message, throttled):
        handler = current_handler.get()

        if handler:
            key = getattr(handler, 'throttling_key', f"{self.prefix}_{handler.__name__}")
        else:
            key = f"{self.prefix}_message"

        if throttled.exceeded_count <= 2:
            await message.reply('‚ùé | –ù–µ —Å–ø–∞–º—å!')


#–û–±—Ä–∞—â–µ–Ω–∏–µ
@dp.message_handler(commands=['–æ–±—Ä–∞—â–µ–Ω–∏–µ', 'q', '–≤–æ–ø—Ä–æ—Å'], commands_prefix='!./')
async def cmd_quest(message: types.Message):
    id = message.from_user.id
    await message.answer(f'üì• | <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è:</b>')
    await Quest.msg.set()

@dp.message_handler(content_types=ContentType.ANY, state=Quest.msg)
async def quest_msgl(message: types.Message, state: FSMContext):
    await state.finish()
    owner = config.owner
    name = message.from_user.get_mention(as_html=True)
    bot_msg = await message.answer(f'–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...')
    await bot.send_message(owner, f'–ü–æ–ª—É—á–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {name}\nID: {message.from_user.id}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\n\n–û–±—Ä–∞—â–µ–Ω–∏–µ:')
    await message.copy_to(owner)
    await bot_msg.edit_text(f'üì§ –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')

#bot_msg
@dp.message_handler(lambda msg: msg.text.lower() == '–±–æ—Ç')
async def bot_msg(message):
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–†–∞–±–æ—Ç–∞–µ—Ç!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        await message.answer(f'–†–∞–±–æ—Ç–∞–µ—Ç!')

#–î–µ–≤–±–æ—Ä–¥
@dp.message_handler(commands=['–¥–µ–≤', 'dev'], commands_prefix='!./')
async def adm_ui(message):
    status = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (status[0])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        admin_menu = InlineKeyboardMarkup()
        statistics_bt = InlineKeyboardButton(text = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data = 'stat')
        mail_bt = InlineKeyboardButton(text = '‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', callback_data = 'rassilka')
        mail_bt2 = InlineKeyboardButton(text = 'üí¨ –ß–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data = 'chat_rassilka')
        ping_bt = InlineKeyboardButton(text = 'üñ• –†–µ—Å—É—Ä—Å—ã –±–æ—Ç–∞', callback_data = 'ping')
        cancel_del_menu = InlineKeyboardMarkup()
        cancel_del_bt = InlineKeyboardButton(text = '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', callback_data = 'cancel_del')
        admin_menu.add(statistics_bt, ping_bt)
        admin_menu.add(mail_bt, mail_bt2)
        admin_menu.add(cancel_del_bt)
        await message.answer('üõ† –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=admin_menu)
    else:
        await message.reply(f'–í—ã –Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫!')

@dp.callback_query_handler(text='cancel_del')
async def handle_cdel_button(c: types.CallbackQuery):
    status = users.cursor.execute("SELECT status from users where id = ?", (c.from_user.id,)).fetchone()
    status = (status[0])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        await c.message.delete()
    else:
        pass

@dp.callback_query_handler(text='stat')
async def handle_stat_button(c: types.CallbackQuery):
    status = users.cursor.execute("SELECT status from users where id = ?", (c.from_user.id,)).fetchone()
    status = (status[0])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        cancel_menu = InlineKeyboardMarkup()
        cancel_bt = InlineKeyboardButton(text = 'üö´ –û—Ç–º–µ–Ω–∞', callback_data = 'cancel')
        cancel_menu.add(cancel_bt)
        us = users.cursor.execute('SELECT * FROM users').fetchall()
        ch = chats.cursor.execute('SELECT * FROM chats').fetchall()
        ls = users.cursor.execute('SELECT * FROM users WHERE ls is 1').fetchall()
        await c.message.edit_text(f"""#–°–¢–ê–¢–ò–°–¢–ò–ö–ê
–Æ–∑–µ—Ä–æ–≤: <b>{len(us)}</b> üë§
–ß–∞—Ç–æ–≤: <b>{len(ch)}</b> üë•
–õ/–°: <b>{len(ls)}</b> ‚úÖ""", reply_markup = cancel_menu)
    else:
        pass

@dp.callback_query_handler(text='ping')
async def handle_ping_button(c: types.CallbackQuery):
    status = users.cursor.execute("SELECT status from users where id = ?", (c.from_user.id,)).fetchone()
    status = (status[0])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        cancel_menu = InlineKeyboardMarkup()
        cancel_bt = InlineKeyboardButton(text = 'üö´ –û—Ç–º–µ–Ω–∞', callback_data = 'cancel')
        cancel_menu.add(cancel_bt)
        cpu = psutil.cpu_percent()
        mem = psutil.virtual_memory().percent
        a = time.time()
        bot_msg = await c.message.edit_text(text='–ü—Ä–æ–≤–µ—Ä–∫–∞...')
        if bot_msg:
            b = time.time()
        await c.message.edit_text(f'–ü–∏–Ω–≥: <b>{round((b-a)*1000, 2)}</b> –º—Å\n–û–ó–£: <b>{mem}</b>% \nCPU: <b>{cpu}</b>%', reply_markup = cancel_menu)
    else:
        pass

@dp.callback_query_handler(text='cancel')
async def cancel_wnum_button_handler(c: types.callback_query):
    status = users.cursor.execute("SELECT status from users where id = ?", (c.from_user.id,)).fetchone()
    status = (status[0])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        admin_menu = InlineKeyboardMarkup()
        statistics_bt = InlineKeyboardButton(text = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data = 'stat')
        mail_bt = InlineKeyboardButton(text = '‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', callback_data = 'rassilka')
        mail_bt2 = InlineKeyboardButton(text = 'üí¨ –ß–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∞', callback_data = 'chat_rassilka')
        ping_bt = InlineKeyboardButton(text = 'üñ• –†–µ—Å—É—Ä—Å—ã –±–æ—Ç–∞', callback_data = 'ping')
        cancel_del_menu = InlineKeyboardMarkup()
        cancel_del_bt = InlineKeyboardButton(text = '‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå', callback_data = 'cancel_del')
        admin_menu.add(statistics_bt, ping_bt)
        admin_menu.add(mail_bt, mail_bt2)
        admin_menu.add(cancel_del_bt)
        await c.message.edit_text('üõ† –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=admin_menu)
    else:
        pass

#–†–∞—Å—Å—ã–ª–∫–∞
#–î–ª—è —é–∑–µ—Ä–æ–≤
@dp.callback_query_handler(text="rassilka")
async def send_rass(call: types.CallbackQuery):
    status = users.cursor.execute("SELECT status from users where id = ?", (call.from_user.id,)).fetchone()
    status = (status[0])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        await call.message.edit_text(text='üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
        await Rass.msg.set()
    else:
        pass

@dp.message_handler(content_types=ContentType.ANY, state=Rass.msg)
async def rassilka_msgl(message: types.Message, state: FSMContext):
    await state.finish()
    users.cursor.execute(f"SELECT id FROM users")
    users_query = users.cursor.fetchall()
    user_ids = [user[0] for user in users_query]
    nowtim = time.time()
    confirm = []
    decline = []
    bot_msg = await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...')
    for i in user_ids:
        try:
            await message.copy_to(i)
            confirm.append(i)
        except:
            decline.append(i)
        await asyncio.sleep(0.15)
    nowtime = time.time()
    uptime = round(nowtime - nowtim)
    uptimestr = str(time.strftime("%H:%M:%S", time.gmtime(int(uptime))))
    await bot_msg.edit_text(f'üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(confirm)}\n‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {len(decline)}\n‚åö –í—Ä–µ–º—è: {str(uptimestr)}')

#–î–ª—è —á–∞—Ç–æ–≤
@dp.callback_query_handler(text="chat_rassilka")
async def send_rass(call: types.CallbackQuery):
    status = users.cursor.execute("SELECT status from users where id = ?", (call.from_user.id,)).fetchone()
    status = (status[0])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        await call.message.edit_text(text='üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:')
        await ChRass.msg.set()
    else:
        pass

@dp.message_handler(content_types=ContentType.ANY, state=ChRass.msg)
async def rassilka_msgl(message: types.Message, state: FSMContext):
    await state.finish()
    chats.cursor.execute(f"SELECT chat_id FROM chats")
    chats_query = chats.cursor.fetchall()
    chat_ids = [chat[0] for chat in chats_query]
    nowtim = time.time()
    confirm = []
    decline = []
    bot_msg = await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...')
    for i in chat_ids:
        try:
            await message.copy_to(i)
            confirm.append(i)
        except:
            decline.append(i)
        await asyncio.sleep(0.15)
    nowtime = time.time()
    uptime = round(nowtime - nowtim)
    uptimestr = str(time.strftime("%H:%M:%S", time.gmtime(int(uptime))))
    await bot_msg.edit_text(f'üì£ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(confirm)}\n‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: {len(decline)}\n‚åö –í—Ä–µ–º—è: {str(uptimestr)}')

#invited (@Penggrin)
@dp.message_handler(content_types=types.ContentTypes.NEW_CHAT_MEMBERS)
async def new_chat_member(message: types.Message):
    if message.new_chat_members[0]['id'] != 5685921196:
        welcome = (chats.cursor.execute("SELECT welcome FROM chats WHERE chat_id = ?", (message.chat.id,)).fetchone())[0]
        await message.answer(f"{welcome}")
        return

    result = """<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b> üëã
–Ø —Å–æ–ª–µ–≤–æ–π –±–æ—Ç PARANOIK. 
–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. 

–£–∑–Ω–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /help

üóû <a href="https://t.me/UFCRussia">–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏</a>

üí¨ <a href="https://t.me/UFCRussiaChat">–ù–∞—à–∞ –æ–±—â–∞—è –±–µ—Å–µ–¥–∞</a>"""

    await message.answer(result)

    chats.cursor.execute(f"SELECT chat_id FROM chats WHERE chat_id = '{message.chat.id}'")
    if chats.cursor.fetchone():
        return

    chats.cursor.execute("INSERT INTO chats VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", (message.chat.id, message.chat.title, message.chat.username, "—Ä–∞–∑—Ä–µ—à–µ–Ω–æ", 0, datetime.now().strftime("%d.%m.%Y"), "–û–±—ã—á–Ω—ã–π", "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", '–¥–∞', "–ù–µ —É–∫–∞–∑–∞–Ω—ã!", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!"))
    chats.connect.commit()

    await bot.send_message(config.owner, f'#–ù–û–í–´–ô_–ß–ê–¢\nüë• –ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title}\nüìé –°—Å—ã–ª–∫–∞: @{message.chat.username}\n‚úÖ ID: <code>{message.chat.id}</code>')

#start_cmd
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    now = datetime.now()
    time_dice = current_date = datetime.now() - timedelta(seconds=18000)
    current = current_date.time()
    regdata = now.strftime("%d.%m.%Y")
    ttime = current.strftime('%H:%M:%S')
    bio = "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ..."
    start_str = """<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b> üëã
–Ø —Å–æ–ª–µ–≤–æ–π –±–æ—Ç PARANOIK.

–£–∑–Ω–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /help

üóû <a href="https://t.me/UFCRussia">–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏</a>

üí¨ <a href="https://t.me/UFCRussiaChat">–ù–∞—à–∞ –æ–±—â–∞—è –±–µ—Å–µ–¥–∞</a>"""

    if message.chat.type == 'private':
        botchatkb = InlineKeyboardMarkup()
        botchatkb.add(InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–∞—Ç–∞", url='https://t.me/nakatika_naebuka'))

        await message.reply(start_str, reply_markup=botchatkb)

        users.cursor.execute("SELECT id FROM users WHERE id = {}".format(message["from"]["id"]))
        if users.cursor.fetchone():
            return

        users.cursor.execute(
            "INSERT INTO users VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);",
            (message["from"]["id"], message["from"]["first_name"], message["from"]["username"], "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 30000, 1000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, regdata, ttime, 0, bio, 0, 1, "00:000:00", 0)
        )
        users.connect.commit()
        await bot.send_message(
            config.owner,
            "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–ù–∏–∫: {}\nID: {}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{}\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è(–∞—Å—å) –≤ –ª/—Å.".format(message["from"]["first_name"], message["from"]["id"], message["from"]["username"])
        )
    else:
        users.cursor.execute("SELECT id FROM users WHERE id = {}".format(message["from"]["id"]))
        if users.cursor.fetchone():
            await message.reply('<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b> üëã\n–Ø —Å–æ–ª–µ–≤–æ–π –±–æ—Ç PARANOIK.\n\n–£–∑–Ω–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /help\n\nüóû <a href="https://t.me/UFCRussia">–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏</a>\n\nüí¨ <a href="https://t.me/UFCRussiaChat">–ù–∞—à–∞ –æ–±—â–∞—è –±–µ—Å–µ–¥–∞</a>')
            return

        users.cursor.execute(
            "INSERT INTO users VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);",
            (message["from"]["id"], message["from"]["first_name"], message["from"]["username"], "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 30000, 1000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, regdata, ttime, 0, bio, 0, 1, "00:00:00", 0)
        )
        users.connect.commit()
        await bot.send_message(
            config.owner,
            "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–ù–∏–∫: {}\nID: {}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{}\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è(–∞—Å—å) –≤ —á–∞—Ç–µ.".format(message["from"]["first_name"], message["from"]["id"], message["from"]["username"])
        )

        await message.reply('<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!</b> üëã\n–Ø —Å–æ–ª–µ–≤–æ–π –±–æ—Ç PARANOIK.\n\n–£–∑–Ω–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /help\n\nüóû <a href="https://t.me/UFCRussia">–ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏</a>\n\nüí¨ <a href="https://t.me/UFCRussiaChat">–ù–∞—à–∞ –æ–±—â–∞—è –±–µ—Å–µ–¥–∞</a>')
    
    args = message.text.split()
    if len(args) <= 1:
        return

    try:
        users.cursor.execute('UPDATE users SET invited_users = invited_users + 1 WHERE id=?', (int(args[1]),))
        await bot.send_message(int(args[1]), "‚ù§Ô∏è –ö—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å–æ–ª–µ–≤–æ–π —Å—Å—ã–ª–∫–µ!")
    except Exception:
        pass

#deluser
@dp.message_handler(commands=['deluser'])
async def deluser(message: types.Message):
    reply = message.reply_to_message
    status = (users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone())[0]

    if (status.lower() == '—Å–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞') or (status.lower() == "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"):
        if reply:
            users.cursor.execute("DELETE FROM users WHERE id = ?", (reply.from_user.id,))
            await message.reply(
                f"‚úÖ | <b>{reply.from_user.get_mention(as_html=True)}</b> –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞",
                parse_mode="html"
            )
    else:
        return await message.reply("‚ùó | –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")

#–ü–µ—Ä–µ–¥–∞—Ç—å
@dp.message_handler(regexp=r"(^–ü–µ—Ä–µ–¥–∞—Ç—å|–ø–µ—Ä–µ–¥–∞—Ç—å) ?(\d+)?")
async def send_money(message: types.Message):
    command_parse = re.compile(r"(^–ü–µ—Ä–µ–¥–∞—Ç—å|–ø–µ—Ä–µ–¥–∞—Ç—å) ?(\d+)?")
    parsed = command_parse.match(message.text)
    balance = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
    balance = (balance[0])
    suma = parsed.group(2)
    name1 = message.reply_to_message.from_user.get_mention(as_html=True)
    name2 = message.from_user.get_mention(as_html=True)
    suma = int(suma)
    data = {}
    data["suma"] = suma
    data['user_id'] = message.reply_to_message.from_user.id
    data1 = {}
    data1["suma"] = suma
    data1['user_id'] = message.from_user.id
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        if int(balance) >= suma:
            users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
            users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data1)
            await message.answer(f"üë§ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name2}\nüí∏ | –ü–µ—Ä–µ–¥–∞–ª(-–∞): <code>{suma}üí∞</code>\nüë§ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {name1}", parse_mode='html')
        else:
            await message.reply(f"‚ùé | –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!", parse_mode='html')
            users.connect.commit()

#–û—Ç–¥–∞—Ç—å
@dp.message_handler(regexp=r"(^–û—Ç–¥–∞—Ç—å|–æ—Ç–¥–∞—Ç—å) ?(\d+)?")
async def send_money(message: types.Message):
    balance = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
    balance = (balance[0])
    command_parse = re.compile(r"(^–û—Ç–¥–∞—Ç—å|–æ—Ç–¥–∞—Ç—å) ?(\d+)?")
    parsed = command_parse.match(message.text)
    suma = parsed.group(2)
    name1 = message.reply_to_message.from_user.get_mention(as_html=True)
    name2 = message.from_user.get_mention(as_html=True)
    suma = int(suma)
    data = {}
    data["suma"] = suma
    data['user_id'] = message.reply_to_message.from_user.id
    data1 = {}
    data1["suma"] = suma
    data1['user_id'] = message.from_user.id
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        if int(balance) >= suma:
            users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
            users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data1)
            await message.answer(f"üë§ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name2}\nüí∏ | –ü–µ—Ä–µ–¥–∞–ª(-–∞): <code>{suma}üí∞</code>\nüë§ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {name1}", parse_mode='html')
        else:
            await message.reply(f"‚ùé | –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏!", parse_mode='html')
            users.connect.commit()

#helpui
@dp.message_handler(commands=['help', '—Ö–µ–ª–ø', '–∫–æ–º–∞–Ω–¥—ã'], commands_prefix='!./')
async def help_ui(message):
    help_menu = InlineKeyboardMarkup()
    osnova_bt = InlineKeyboardButton(text = 'üìñ –û—Å–Ω–æ–≤–Ω—ã–µ', callback_data = 'osnova')
    games_bt = InlineKeyboardButton(text = 'üé∞ –ò–≥—Ä–æ–≤—ã–µ', callback_data = 'games')
    moders_bt = InlineKeyboardButton(text = 'üëÆ‚Äç –î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤', callback_data = 'moders')
    rolpl_bt = InlineKeyboardButton(text = 'üé≠ Role Play', callback_data = 'rolpl')
    cancel_help_bt = InlineKeyboardButton(text = 'üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data = 'cancel_help')
    help_menu.add(osnova_bt, games_bt)
    help_menu.add(rolpl_bt, moders_bt)
    help_menu.add(cancel_help_bt)
    await message.answer('–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:', reply_markup=help_menu)

@dp.callback_query_handler(text='cancel_help')
async def handle_help_cdel_button(c: types.CallbackQuery):
    await c.message.delete()

@dp.callback_query_handler(text='osnova')
async def handle_osnova_button(c: types.CallbackQuery):
    cancel_help_menu = InlineKeyboardMarkup()
    cancel_help_bt = InlineKeyboardButton(text = ' –ù–∞–∑–∞–¥', callback_data = 'cancelhelp')
    cancel_help_menu.add(cancel_help_bt)
    await c.message.edit_text(f"""üìñ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

‚úÖ /start ‚Äî –Ω–∞—á–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. 
üìö /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞. 
üë§ –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–æ—Ç–µ. 
‚úèÔ∏è /bio (—Ç–µ–∫—Å—Ç) ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. 
üóí –ë–∏–æ ‚Äî –≤—ã–∑–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ. 
üè∑ /name ‚Äî —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫. 
üí∏ –ü–µ—Ä–µ–¥–∞—Ç—å (–∫–æ–ª-–≤–æ) ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.""", reply_markup=cancel_help_menu)

@dp.callback_query_handler(text='games')
async def handle_games_button(c: types.CallbackQuery):
    cancel_help_menu = InlineKeyboardMarkup()
    cancel_help_bt = InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data = 'cancelhelp')
    cancel_help_menu.add(cancel_help_bt)
    await c.message.edit_text(f"""üé∞ –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üí∞ –ë–∞–ª–∞–Ω—Å ‚Äî –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–∏–Ω–æ–Ω–∏–º—ã –∫–æ–º–∞–Ω–¥—ã: "–ë".
üè¶ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç (—Å—É–º–º–∞) ‚Äî –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç. 
üè¶ –°–Ω—è—Ç—å —Å–æ —Å—á—ë—Ç–∞ (—Å—É–º–º–∞) ‚Äî —Å–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞. 
üïπ –ú–æ–∏ –∏–≥—Ä—ã ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∏–≥—Ä. 
üé± –í—ã–±–µ—Ä–∏ –æ—Ç (—á–∏—Å–ª–æ) –¥–æ (—á–∏—Å–ª–æ) ‚Äî –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ. 
üé∞ –ö–∞–∑–∏–Ω–æ (—Å—Ç–∞–≤–∫–∞) ‚Äî –∏–≥—Ä–∞ –≤ –∫–∞–∑–∏–Ω–æ. 
üé≤ –ö—É–± [1-6] (—Å—Ç–∞–≤–∫–∞) ‚Äî –∏–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏. 
üéØ –î–∞—Ä—Ç—Å (—Å—Ç–∞–≤–∫–∞) ‚Äî –∏–≥—Ä–∞ –≤ –¥–∞—Ä—Ç—Å. 
üèÄ –ë–∞—Å (—Å—Ç–∞–≤–∫–∞) ‚Äî –∏–≥—Ä–∞ –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª. 
üé≥ –ë–æ—É–ª (—Å—Ç–∞–≤–∫–∞) ‚Äî –∏–≥—Ä–∞ –≤ –±–æ—É–ª–∏–Ω–≥. 
‚öΩ –§—É—Ç (—Å—Ç–∞–≤–∫–∞) ‚Äî –∏–≥—Ä–∞ –≤ —Ñ—É—Ç–±–æ–ª. 
üêá–û—Ö–æ—Ç–∞ (—Å—Ç–∞–≤–∫–∞) ‚Äî —Å—Ö–æ–¥–∏—Ç—å –Ω–∞ –æ—Ö–æ—Ç—É. 
üß© –°–ª–æ—Ç—ã (—Å—Ç–∞–≤–∫–∞) ‚Äî –∏–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã.""", reply_markup=cancel_help_menu)

@dp.callback_query_handler(text='moders')
async def handle_moders_button(c: types.CallbackQuery):
    cancel_help_menu = InlineKeyboardMarkup()
    cancel_help_bt = InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data = 'cancelhelp')
    cancel_help_menu.add(cancel_help_bt)
    await c.message.edit_text(f"""üëÆ‚Äç –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞:

üïπ –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–≥—Ä—ã ‚Äî  —Ä–∞–∑—Ä–µ—à–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–≥—Ä–∞—Ç—å –≤ —á–∞—Ç–µ. 
üïπ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–≥—Ä—ã ‚Äî  –∑–∞–ø—Ä–µ—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–≥—Ä–∞—Ç—å –≤ —á–∞—Ç–µ. 
üëÆ‚Äç‚ôÇ –í–∫–ª –º–æ–¥–µ—Ä ‚Äî –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —á–∞—Ç–µ. 
üëÆ‚Äç‚ôÇ –í—ã–∫–ª –º–æ–¥–µ—Ä ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —á–∞—Ç–µ. 
üîá /mute (–≤—Ä–µ–º—è) (–ø—Ä–∏—á–∏–Ω–∞) ‚Äî –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
üîà /unmute ‚Äî —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
üî¥ /ban ‚Äî –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
üü¢ /unban ‚Äî —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. 
üóë /del ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. 
üóì /welcome (—Ç–µ–∫—Å—Ç) ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. 
üìú /rules (—Ç–µ–∫—Å—Ç) ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞. 
üìñ –ü—Ä–∞–≤–∏–ª–∞ ‚Äî  –≤—ã–∑–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞. 
üìõ /report ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –∞–¥–º–∏–Ω–∞–º –Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞.""", reply_markup=cancel_help_menu)

@dp.callback_query_handler(text='rolpl')
async def handle_rolpl_button(c: types.CallbackQuery):
    cancel_help_menu = InlineKeyboardMarkup()
    cancel_help_bt = InlineKeyboardButton(text = '–ù–∞–∑–∞–¥', callback_data = 'cancelhelp')
    cancel_help_menu.add(cancel_help_bt)
    await c.message.edit_text(f"""üé≠ Role play –∫–æ–º–∞–Ω–¥—ã:

üí¨ /rp ‚Äî –∫–∞—Å—Ç–æ–º–Ω–∞—è –†–ü –∫–æ–º–∞–Ω–¥–∞. 
üçÜ /dick ‚Äî —É–≤–µ–ª–∏—á–∏—Ç—å —è–ª–¥–∞–∫. 
üß∞ /work ‚Äî –ø–æ–π—Ç–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É. 
üèÜ –¢–æ–ø –± ‚Äî —Ç–æ–ø 15 –±–æ–≥–∞—á–µ–π –±–æ—Ç–∞. 
üèÜ –¢–æ–ø —Ö ‚Äî —Ç–æ–ø 15 —è–ª–¥–∞–∫–æ–≤ –±–æ—Ç–∞. 
üèÜ –¢–æ–ø –∏ ‚Äî —Ç–æ–ø 15 –∏–≥—Ä–æ–∫–æ–≤ –±–æ—Ç–∞.""", reply_markup=cancel_help_menu)

@dp.callback_query_handler(text='cancelhelp')
async def cancel_help_button_handler(c: types.callback_query):
    help_menu = InlineKeyboardMarkup()
    osnova_bt = InlineKeyboardButton(text = 'üìñ –û—Å–Ω–æ–≤–Ω—ã–µ', callback_data = 'osnova')
    games_bt = InlineKeyboardButton(text = 'üé∞ –ò–≥—Ä–æ–≤—ã–µ', callback_data = 'games')
    moders_bt = InlineKeyboardButton(text = 'üëÆ‚Äç –î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤', callback_data = 'moders')
    rolpl_bt = InlineKeyboardButton(text = 'üé≠ Role Play', callback_data = 'rolpl')
    cancel_help_bt = InlineKeyboardButton(text = 'üö´ –ó–∞–∫—Ä—ã—Ç—å', callback_data = 'cancel_help')
    help_menu.add(osnova_bt, games_bt)
    help_menu.add(rolpl_bt, moders_bt)
    help_menu.add(cancel_help_bt)
    await c.message.edit_text(text='–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:', reply_markup=help_menu)

#work
@dp.message_handler(commands=['work', '—Ä–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—Ç–∞—Ç—å'], commands_prefix='+!./')
async def work_cmd(message: types.Message):
    emoji = random.choice(["üò¥", "üò∂‚Äçüå´Ô∏è", "ü´†", "ü•∂", "ü§•", "ü´°", "ü§®", "üòê", "üóø"])
    user_id = message['from']['id']
    users.cursor.execute("SELECT work_time FROM users WHERE id = {}".format(user_id))
    ltime = users.cursor.fetchone()[0]
    current_date_time = datetime.now()
    current_time = current_date_time.time()
    q = current_time.strftime('%H:%M:%S')
    a, b, t1, t2 = f'{ltime}'.split(':'), f'{q}'.split(':'), 0, 0
    for i in range(2, -1, -1):
        t1, t2 = t1 + 60**i*int(a[2-i]), t2 + 60**i*int(b[2-i])
    a = (86400 - t1) * int(t2 < t1) + t2 - t1 * int(not (t2 < t1))
    if a >= 7200:
        money_r = randint(5000, 15000)
        data = {}
        data["rand"] = (money_r)
        data['user_id'] = user_id
        balance = users.cursor.execute("SELECT balance FROM users WHERE id = ?",(user_id,)).fetchone()
        bal = (balance[0])
        await message.reply("üë®‚Äçüíº | –í—ã —É—Å–ø–µ—à–Ω–æ —Å—Ö–æ–¥–∏–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: <b>{}üí∞</b>  \nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{}üí∞</b>".format(money_r, int(bal+money_r)))
        users.cursor.execute("""UPDATE users SET balance = balance + :rand WHERE id = :user_id;""", data)
        users.cursor.execute("UPDATE users SET work_time = ? WHERE id = ?", (q, user_id))
        users.connect.commit()
    else:
        balance = users.cursor.execute("SELECT balance FROM users WHERE id = ?",(user_id,)).fetchone()
        bal = (balance[0])
        await message.reply(f"{emoji} | –•–æ–¥–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 2 —á–∞—Å–∞, –∏–¥–∏—Ç–µ –ø–æ—Å–æ–ª–∏—Ç–µ—Å—å!\nüí≥ | –°–µ–π—á–∞—Å –≤–∞—à –±–∞–ª–∞–Ω—Å: <b>{bal}</b>üí∞")

#chatwelcome
@dp.message_handler(commands=["welcome"])
async def rules_cmd(message: types.Message):
    if message.chat.type == "supergroup" or message.chat.type == "group":
        user_id = message.from_user.id
        chat_id = message.chat.id
        new_welcome = message.get_args()
        admins_list = [admin.user.id for admin in await bot.get_chat_administrators(chat_id=chat_id)]
        if user_id in admins_list:
            if new_welcome:
                chats.cursor.execute("UPDATE chats SET welcome=? WHERE chat_id=?", (new_welcome, chat_id,))
                chats.connect.commit()
                await message.answer("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–∞—Ç–∞ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
            else:
                await message.answer("üí¨ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ!")
        else:
            await message.answer("üõ°Ô∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞!")
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")

#chatwelcome_msg
@dp.message_handler(lambda msg: msg.text.lower() == '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')
async def chatwelcome_msg(message):
    if message.chat.type == "supergroup" or message.chat.type == "group":
        chat_id = message.chat.id
        chat_welcome = chats.cursor.execute("SELECT welcome FROM chats WHERE chat_id = ?", (chat_id,)).fetchone()
        welcome = (chat_welcome[0])
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–∞—Ç–∞:\n{}".format(welcome))
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")

#–†–∞—Å—Ç–∏—Ç—å —Ö—É–π
@dp.message_handler(commands=['—Ö—É–π', '—è–ª–¥–∞–∫', 'dick'], commands_prefix='+!./')
async def dick_cmd(message: types.Message):
    msg = message
    name = users.cursor.execute("SELECT name from users where id = ?",(msg.from_user.id,)).fetchone()
    name = (name[0])
    emoji = random.choice(["üò∂‚Äçüå´Ô∏è", "ü´°", "ü•∂", "ü§•", "üò¥", "ü´†", "ü§®", "üòê", "üóø"])
    id = msg['from']['id']
    users.cursor.execute(f"SELECT dick_time FROM users WHERE id = '{id}'")
    ltime = users.cursor.fetchone()[0]
    current_date_time = datetime.now()
    current_time = current_date_time.time()
    q = current_time.strftime('%H:%M:%S')
    a, b, t1, t2 = f'{ltime}'.split(':'), f'{q}'.split(':'), 0, 0
    
    for i in range(2, -1, -1):
        t1, t2 = t1 + 60**i*int(a[2-i]), t2 + 60**i*int(b[2-i])
    a = (86400 - t1) * int(t2 < t1) + t2 - t1 * int(not (t2 < t1))
    
    if a >= 7200:
        dick_r = randint(-15, 30)
        data = {}
        data["rand"] = (dick_r)
        data['user_id'] = msg.from_user.id
        dick = users.cursor.execute("SELECT dick from users where id = ?",(msg.from_user.id,)).fetchone()
        dick = (dick[0])

        if dick_r > 0:
            await msg.reply(f'üí¶ | –í—ã —É–≤–µ–ª–∏—á–∏–ª–∏ —Å–≤–æ–π —è–ª–¥–∞–∫ –Ω–∞ <b>{dick_r} —Å–º.</b>\nüçÜ | –¢–µ–ø–µ—Ä—å –µ–≥–æ –¥–ª–∏–Ω–∞: <b>{dick + dick_r} —Å–º.</b>', parse_mode='html')
        else:
            await msg.reply(f'‚úÇÔ∏è | –í—ã –∑–∞—Å–æ–ª–∏–ª–∏ —Å–≤–æ–π —è–ª–¥–∞–∫ –Ω–∞ <b>{dick_r} —Å–º.</b>\nüçÜ | –¢–µ–ø–µ—Ä—å –µ–≥–æ –¥–ª–∏–Ω–∞: <b>{dick + dick_r} —Å–º.</b>', parse_mode='html')
        
        users.cursor.execute("""UPDATE users SET dick = dick + :rand WHERE id = :user_id;""", data)
        users.cursor.execute('UPDATE users SET dick_time = ? WHERE id = ?', (q, id))
        users.connect.commit()
    else:
        dick = users.cursor.execute("SELECT dick from users where id = ?",(msg.from_user.id,)).fetchone()
        dick = (dick[0])
        await msg.reply(f'{emoji} | –£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —è–ª–¥–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 2 —á–∞—Å–∞, –ø—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ!\nüçÜ | –°–µ–π—á–∞—Å –µ–≥–æ –¥–ª–∏–Ω–∞: <b>{dick} —Å–º.</b>', parse_mode='html')

#–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É
@dp.message_handler(commands=['setstavka'])
async def setbal(message: types.Message):
    args = message.get_args()
    summ = int(args)
    users.cursor.execute("SELECT stavka FROM users WHERE id=?", (message.from_user.id,))
    data = users.cursor.fetchone()
    if data is None:
        await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    stts = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (stts[0])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        reply = message.reply_to_message
        if reply:
            replyuser = reply.from_user
            users.cursor.execute(f'UPDATE users SET stavka=? WHERE id=?', (summ, replyuser.id,))
            users.connect.commit()
            await message.reply(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è {replyuser.full_name} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {args} üí∞")
    elif str(status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        reply = message.reply_to_message
        if reply:
            replyuser = reply.from_user
            users.cursor.execute(f'UPDATE users SET stavka=? WHERE id=?', (summ, replyuser.id,))
            users.connect.commit()
            await message.reply(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è {replyuser.full_name} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {args} üí∞")
        else:
            await message.reply(f"‚ùó | –ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–ø–ª–∞–π!")
    else:
        return await message.reply(f"‚ùó | –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ —Å—Ç–∞–≤–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")

#–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö—É–π
@dp.message_handler(commands=['setdick'])
async def setdick(message: types.Message):
    args = message.get_args()
    summ = int(args)
    users.cursor.execute("SELECT dick FROM users WHERE id=?", (message.from_user.id,))
    data = users.cursor.fetchone()
    if data is None:
        await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    stts = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (stts[0])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        reply = message.reply_to_message
        if reply:
            replyuser = reply.from_user
            users.cursor.execute(f'UPDATE users SET dick=? WHERE id=?', (summ, replyuser.id,))
            users.connect.commit()
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {replyuser.full_name}\n–ò–∑–º–µ–Ω–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —è–ª–¥–∞–∫–∞ –Ω–∞ {summ} —Å–º.")
    elif str(status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        reply = message.reply_to_message
        if reply:
            replyuser = reply.from_user
            users.cursor.execute(f'UPDATE users SET dick=? WHERE id=?', (args, replyuser.id,))
            users.connect.commit()
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {replyuser.full_name}\n–ò–∑–º–µ–Ω–ª–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —è–ª–¥–∞–∫–∞ –Ω–∞ <code>{summ} —Å–º.</code>")
        else:
            await message.reply(f"‚ùó | –ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–ø–ª–∞–π!")
    else:
        return await message.reply(f"‚ùó | –ù–∏—è–ª–¥–∞–∫–∞—Å–µ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —è–ª–¥–∞–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! üôÇ")

#–°–≤–æ—è —Ä–ø
@dp.message_handler(commands=['rp'])
async def custom_rp(message: types.Message):
    args = message.get_args()
    reply = message.reply_to_message
    status = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (status[0])
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        if str(status) == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' or str(status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' or str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
            if reply:
                if args:
                    name1 = message.from_user.get_mention(as_html=True)
                    name2 = message.reply_to_message.from_user.get_mention(as_html=True)
                    await message.answer(f'üí¨ | {name1} {args} {name2}')
                else:
                    await message.answer(f'üìù | –í–≤–µ–¥–∏—Ç–µ –†–ü –¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–∏–º–µ—Ä: "/rp –ø–æ—Ü–µ–ª–æ–≤–∞–ª"')
            else:
                if args:
                    name1 = message.from_user.get_mention(as_html=True)
                    await message.answer(f'üí¨ | {name1} {args}')
                else:
                    await message.answer(f'üìù | –í–≤–µ–¥–∏—Ç–µ –†–ü –¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–∏–º–µ—Ä: "/rp –ø–æ—à—ë–ª –≤ –º–∞–≥–∞–∑–∏–Ω"')
        else:
            await message.reply(f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º üíé')

#–ë–∏–æ
@dp.message_handler(commands=['bio'])
async def setbio(message: types.Message):
    args = message.get_args()
    name = message.from_user.get_mention(as_html=True)
    users.cursor.execute("SELECT bio FROM users WHERE id=?", (message.from_user.id,))
    data = users.cursor.fetchone()
    vip = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    vip = (vip[0])
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        if str(vip) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞' or str(vip) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' or str(vip) == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
            if len(args) <= 350:
                if args:
                    if data is None:
                        return await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
                    users.cursor.execute(f'UPDATE users SET bio=? WHERE id=?', (args, message.from_user.id,))
                    users.connect.commit()
                    await message.answer(f"üìÑ | –û–ø–∏—Å–∞–Ω–∏–µ {str(name)} –∏–∑–º–µ–Ω–µ–Ω–æ!")
                else:
                    await message.reply('‚ùé | –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!')
            else:
                await message.reply('‚ùé | –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è 350 —Å–∏–º–≤–æ–ª–æ–≤!')
        else:
            await message.reply(f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º üíé')

#–û–ø–∏—Å–∞–Ω–∏–µ
@dp.message_handler(lambda message: message.text.lower() == '–±–∏–æ')
async def bio_text(message: types.Message):
    bio = users.cursor.execute("SELECT bio from users where id = ?", (message.from_user.id,)).fetchone()
    bio = (bio[0])
    vip = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    vip = (vip[0])
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        if str(vip) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞' or str(vip) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' or str(vip) == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
            await message.reply(f'üóì | –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:\n{bio}')
        else:
            await message.reply(f'–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º üíé')

#profile_msg
@dp.message_handler(lambda msg: ((msg.text.lower() == '–∏–Ω—Ñ–∞') or (msg.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å")))
async def profile_msg(message):
    balance = (users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone())[0]
    name = (users.cursor.execute("SELECT name from users where id = ?", (message.from_user.id,)).fetchone())[0]
    status = (users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone())[0]
    games = (users.cursor.execute("SELECT games from users where id = ?", (message.from_user.id,)).fetchone())[0]
    stavka = (users.cursor.execute("SELECT stavka from users where id = ?", (message.from_user.id,)).fetchone())[0]
    dick = (users.cursor.execute("SELECT dick from users where id = ?", (message.from_user.id,)).fetchone())[0]
    regdata = (users.cursor.execute("SELECT regdata from users where id = ?", (message.from_user.id,)).fetchone())[0]
    invited_users = (users.cursor.execute("SELECT invited_users from users where id = ?", (message.from_user.id,)).fetchone())[0]

    users.cursor.execute(f"SELECT id from users WHERE id = '{message.from_user.id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        await message.reply(f"""üìà | –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üè∑ –ù–∏–∫–Ω–µ–π–º: {name}
üë§ –°—Ç–∞—Ç—É—Å: {status}
üí∞ –ë–∞–ª–∞–Ω—Å: <code>{balance}</code>
üí∞ –°—Ç–∞–≤–∫–∞: <code>{stavka}</code>
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: <b>{games}</b>
üçÜ –î–ª–∏–Ω–∞ —è–ª–¥–∞–∫–∞: <b>{dick}</b> —Å–º.
üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>t.me/ELAS_game_bot?start={message.from_user.id}</code>
üë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ª—é–¥–µ–π: {invited_users}
üï∞ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {regdata}""", parse_mode='html')

#stata_msg
@dp.message_handler(lambda msg: msg.text.lower() == '—Å—Ç–∞—Ç–∞')
async def stata_msg(message):
    msg = message
    balance = users.cursor.execute("SELECT balance from users where id = ?", (msg.from_user.id,)).fetchone()
    balance = (balance[0])
    name = users.cursor.execute("SELECT name from users where id = ?", (msg.from_user.id,)).fetchone()
    name = (name[0])
    status = users.cursor.execute("SELECT status from users where id = ?", (msg.from_user.id,)).fetchone()
    status = (status[0])
    games = users.cursor.execute("SELECT games from users where id = ?", (msg.from_user.id,)).fetchone()
    games = (games[0])
    stavka = users.cursor.execute("SELECT stavka from users where id = ?", (msg.from_user.id,)).fetchone()
    stavka = (stavka[0])
    dick = users.cursor.execute("SELECT dick from users where id = ?", (msg.from_user.id,)).fetchone()
    dick = (dick[0])
    regdata = users.cursor.execute("SELECT regdata from users where id = ?", (msg.from_user.id,)).fetchone()
    regdata = (regdata[0])
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        await msg.reply(f"""üìà | –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üìé –ù–∏–∫–Ω–µ–π–º: {name}
üë§ –°—Ç–∞—Ç—É—Å: {status}
üí∞ –ë–∞–ª–∞–Ω—Å: <code>{balance}</code>
üí∞ –°—Ç–∞–≤–∫–∞: <code>{stavka}</code>
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: <b>{games}</b>
üçÜ –î–ª–∏–Ω–∞ —è–ª–¥–∞–∫–∞: <b>{dick}</b> —Å–º.
üï∞ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {regdata}""", parse_mode='html')

#info_msg
@dp.message_handler(lambda msg: msg.text.lower() == '–∏–Ω—Ñ–æ')
async def info_msg(message):
    msg = message
    balance = users.cursor.execute("SELECT balance from users where id = ?", (msg.from_user.id,)).fetchone()
    balance = (balance[0])
    name = users.cursor.execute("SELECT name from users where id = ?", (msg.from_user.id,)).fetchone()
    name = (name[0])
    status = users.cursor.execute("SELECT status from users where id = ?", (msg.from_user.id,)).fetchone()
    status = (status[0])
    games = users.cursor.execute("SELECT games from users where id = ?", (msg.from_user.id,)).fetchone()
    games = (games[0])
    stavka = users.cursor.execute("SELECT stavka from users where id = ?", (msg.from_user.id,)).fetchone()
    stavka = (stavka[0])
    dick = users.cursor.execute("SELECT dick from users where id = ?", (msg.from_user.id,)).fetchone()
    dick = (dick[0])
    regdata = users.cursor.execute("SELECT regdata from users where id = ?", (msg.from_user.id,)).fetchone()
    regdata = (regdata[0])
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        await msg.reply(f"""üìà | –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
üìé –ù–∏–∫–Ω–µ–π–º: {name}
üë§ –°—Ç–∞—Ç—É—Å: {status}
üí∞ –ë–∞–ª–∞–Ω—Å: <code>{balance}</code>
üí∞ –°—Ç–∞–≤–∫–∞: <code>{stavka}</code>
üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: <b>{games}</b>
üçÜ –î–ª–∏–Ω–∞ —è–ª–¥–∞–∫–∞: <b>{dick}</b> —Å–º.
üï∞ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {regdata}""", parse_mode='html')

#admin_cmd
@dp.message_handler(commands=['admins_cmd'])
async def admins_cmd(message: types.Message):
    status = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (status[0])
    if str(status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' or str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        await message.reply(f"""–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–≤ –±–æ—Ç–∞:
"–í—ã–¥–∞—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)" - –≤—ã–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—é
"–ó–∞–±—Ä–∞—Ç—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)" - –∑–∞–±—Ä–∞—Ç—å –º–æ–Ω–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/setbal - –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/setdick - –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏–Ω—É —è–ª–¥–∞–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/setstavka - –∏–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å. —Å—Ç–∞–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/user_status –∏–ª–∏ /chat_status - –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/—á–∞—Ç–∞""")
    else:
        pass

#chatrules_msg
@dp.message_handler(lambda msg: msg.text.lower() == '–ø—Ä–∞–≤–∏–ª–∞')
async def chatrules_msg(message):
    if message.chat.type == "supergroup" or message.chat.type == "group":
        chat_id = message.chat.id
        chat_rules = chats.cursor.execute("SELECT rules FROM chats WHERE chat_id = ?", (chat_id,)).fetchone()
        rules = (chat_rules[0])
        await message.answer("–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:\n\n{}".format(rules))
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")

#chatrules
@dp.message_handler(commands=["rules"])
async def rules_cmd(message: types.Message):
    if message.chat.type == "supergroup" or message.chat.type == "group":
        user_id = message.from_user.id
        chat_id = message.chat.id
        new_rules = message.get_args()
        admins_list = [admin.user.id for admin in await bot.get_chat_administrators(chat_id=chat_id)]
        if user_id in admins_list:
            if new_rules:
                chats.cursor.execute("UPDATE chats SET rules=? WHERE chat_id=?", (new_rules, chat_id,))
                chats.connect.commit()
                await message.answer("üìë –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!")
            else:
                await message.answer("üí¨ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞!")
        else:
            await message.answer("üõ°Ô∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞!")
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")

#chatinfo
@dp.message_handler(commands=['chatinfo', '—á–∞—Ç–∏–Ω—Ñ–æ'], commands_prefix='./')
async def chatinfo_cmd(message: types.Message):
    msg = message
    chat_name = chats.cursor.execute("SELECT chat_name from chats where chat_id = ?", (msg.chat.id,)).fetchone()
    chat_name = (chat_name[0])
    chat_username = chats.cursor.execute("SELECT chat_username from chats where chat_id = ?", (msg.chat.id,)).fetchone()
    chat_username = (chat_username[0])
    chat_status = chats.cursor.execute("SELECT chat_status from chats where chat_id = ?", (msg.chat.id,)).fetchone()
    chat_status = (chat_status[0])
    chat_games = chats.cursor.execute("SELECT chat_games from chats where chat_id = ?", (msg.chat.id,)).fetchone()
    chat_games = (chat_games[0])
    game_rule = chats.cursor.execute("SELECT game_rule from chats where chat_id = ?", (msg.chat.id,)).fetchone()
    game_rule = (game_rule[0])
    reg_data = chats.cursor.execute("SELECT reg_data from chats where chat_id = ?", (msg.chat.id,)).fetchone()
    reg_data = (reg_data[0])
    members = await message.chat.get_members_count()
    admins_id = [(admin.user.id) for admin in await bot.get_chat_administrators(chat_id=message.chat.id)]
    if str(chat_status) == '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π':
        stat = "‚úÖ"
    elif str(chat_status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π':
        stat = "‚Äçüë®‚ÄçüíªÔ∏è"
    elif str(chat_status) == 'VIP —á–∞—Ç':
        stat = "üíé"
    elif str(chat_status) == '–û–±—ã—á–Ω—ã–π':
        stat = "üë•"
    if str(game_rule) == '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ':
        rule = "‚úÖ"
    elif str(game_rule) == '–∑–∞–ø—Ä–µ—â–µ–Ω–æ':
        rule = "‚ùé"
    await msg.answer(f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:
üóíÔ∏è | –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_name}
üìé | –°—Å—ã–ª–∫–∞: @{chat_username}
üï∞ | –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {reg_data}
{stat} | –°—Ç–∞—Ç—É—Å: {chat_status}
üéÆ | –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {chat_games}
{rule} | –ò–≥—Ä–∞—Ç—å –≤ —á–∞—Ç–µ {game_rule}
üë§ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {members}
üëÆ‚Äç‚ôÇÔ∏è | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —á–∞—Ç–µ: {len(admins_id)}""")

#set_name
@dp.message_handler(commands=['name'])
async def set_name(message: types.Message):
    msg = message
    args = msg.get_args()
    uname = msg.from_user.username
    id = msg.from_user.id
    users.cursor.execute("SELECT id FROM users WHERE id=?", (message.from_user.id,))
    data = users.cursor.fetchone()
    if len(args) <= 15:
        if args:
            if data is None:
                return await msg.reply("ü§î | –í—ã –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            users.cursor.execute(f'UPDATE users SET name=? WHERE id=?', (args, id,))
            users.cursor.execute(f'UPDATE users SET username=? WHERE id=?', (uname, id,))
            users.connect.commit()
            await msg.reply(f"üìù | –í–∞—à –Ω–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ¬´{args}¬ª")
        else:
            await msg.reply('‚ùé | –ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!')
    else:
        await msg.reply('‚ùé | –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤!')

#—Å—Ç–∞—Ç—É—Å—ã
@dp.message_handler(lambda msg: msg.text.lower() == '—Å—Ç–∞—Ç—É—Å—ã')
async def statuses_msg(message):
    msg = message
    name = msg.from_user.get_mention
    await msg.answer(f"""–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
üë§ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
üëÆ‚Äç‚ôÇÔ∏è | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä  - —á–ª–µ–Ω –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞ 
üë®‚Äçüíª | –°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞ - –∫–æ–¥–µ—Ä

–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã —á–∞—Ç–æ–≤:
üë• | –û–±—ã—á–Ω—ã–π - –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 
‚úÖ | –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã —Å–µ—Ç–∫–∏ –±–æ—Ç–∞ 
üë®‚Äçüíª | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π - —á–∞—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞""")

#—Ä–µ–ø–æ—Ä—Ç
@dp.message_handler(commands=['r', 'report'])
async def cmd_report(message: types.Message):
    try:
        if message.text == '/report' or message.text == '/r' or not message.reply_to_message:
            await bot.send_message(message.chat.id, 'üìñ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ä–µ–ø–æ—Ä—Ç–∞ –æ—Ç–≤–µ—á–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º, –ø—Ä–∏–º–µ—Ä: \n<code>/report —Å–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞</code>')
        else:
            members = await message.chat.get_member(message.reply_to_message.from_user.id)
            info = await bot.get_chat_member(message.chat.id, message.from_user.id)
            report = message.text.replace('/r ', '')
            report = report.replace('/report ', '')
            admins = await bot.get_chat_administrators('@' + message.chat.username)
            send = 0
            for admin in admins:
                if admin.user.username != 'HegaGameBot':
                    try:
                        await bot.send_message(admin.user.id, f'üì¨ –†–µ–ø–æ—Ä—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ' + str(report) + f'\n\nhttps://t.me/{message.chat.username}/{message.reply_to_message.message_id}')
                    except:
                        pass
                    send += 1

            if send == 0:
                await bot.send_message(message.chat.id, 'üëÆ–ê–¥–º–∏–Ω—ã –Ω–µ –æ–ø–æ–≤–µ—â–µ–Ω—ã, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–º —Ä–µ–ø–æ—Ä—Ç–æ–≤ –Ω–∞–¥–æ —á—Ç–æ–±—ã –æ–Ω–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –º–µ–Ω—è –≤ –ª—Å!')
            else:
                await bot.send_message(message.chat.id, 'üëÆ–ê–¥–º–∏–Ω—ã –æ–ø–æ–≤–µ—â–µ–Ω—ã!')
    except:
        pass

#+–º–æ–¥–µ—Ä
@dp.message_handler(lambda msg: msg.text.lower() == '–≤–∫–ª –º–æ–¥–µ—Ä')
async def moder_on(message):
    name = message.from_user.get_mention()
    chat_username = message.chat.username
    admins_list = [admin.user.id for admin in await bot.get_chat_administrators(chat_id=message.chat.id)]
    stts = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (stts[0])
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        if message.from_user.id in admins_list or str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
            mod_cmd = chats.cursor.execute("SELECT mod_cmd from chats where chat_id = ?", (message.chat.id,)).fetchone()
            mod_cmd = (mod_cmd[0])
            if str(mod_cmd) == '–¥–∞':
                await message.reply(f'‚ùé | –í —ç—Ç–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω—ã!')
            else:
                chats.cursor.execute('UPDATE chats SET mod_cmd = ? WHERE chat_id = ?', ("–¥–∞", message.chat.id))
                chats.connect.commit()
                await message.answer(f'‚úÖ | –í —ç—Ç–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–µ–ø–µ—Ä—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!')
                await bot.send_message(config.owner, f'{name} —Ä–∞–∑—Ä–µ—à–∏–ª –º–æ–¥–µ—Ä. –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ @{chat_username}')
        else:
            await message.reply(f'üëÆ‚Äç‚ôÇÔ∏è‚ùé | –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞!')

#-–º–æ–¥–µ—Ä
@dp.message_handler(lambda msg: msg.text.lower() == '–≤—ã–∫–ª –º–æ–¥–µ—Ä')
async def moder_off(message):
    name = message.from_user.get_mention()
    chat_username = message.chat.username
    admins_list = [admin.user.id for admin in await bot.get_chat_administrators(chat_id=message.chat.id)]
    stts = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (stts[0])
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        if message.from_user.id in admins_list or str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
            mod_cmd = chats.cursor.execute("SELECT mod_cmd from chats where chat_id = ?", (message.chat.id,)).fetchone()
            mod_cmd = (mod_cmd[0])
            if str(mod_cmd) == '–Ω–µ—Ç':
                await message.reply(f'‚ùé | –í —ç—Ç–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω—ã!')
            else:
                chats.cursor.execute('UPDATE chats SET mod_cmd = ? WHERE chat_id = ?', ("–Ω–µ—Ç", message.chat.id))
                chats.connect.commit()
                await message.answer(f'‚úÖ | –í —ç—Ç–æ–º —á–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–µ—â–µ–Ω—ã!')
                await bot.send_message(config.owner, f'{name} –∑–∞–ø—Ä–µ—Ç–∏–ª –º–æ–¥–µ—Ä. –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ @{chat_username}')
        else:
            await message.reply(f'üëÆ‚Äç‚ôÇÔ∏è‚ùé | –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞!')

#–ú—É—Ç
@dp.message_handler(commands=['–º—É—Ç', 'mute'], commands_prefix='!?./', is_chat_admin=True)
async def mute(message):
    msg = message
    name1 = msg.from_user.get_mention()
    name2 = msg.reply_to_message.from_user.get_mention()
    mod_cmd = chats.cursor.execute("SELECT mod_cmd from chats where chat_id = ?", (message.chat.id,)).fetchone()
    mod_cmd = (mod_cmd[0])
    if str(mod_cmd) == '–¥–∞':
        if not message.reply_to_message:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return
        try:
            muteint = int(message.text.split()[1])
            mutetype = message.text.split()[2]
            comment = " ".join(message.text.split()[3:])
        except IndexError:
            await message.reply('‚ùé | –ü—Ä–∏–º–µ—Ä: <code>/–º—É—Ç 1 —á –ø—Ä–∏—á–∏–Ω–∞</code>')
            return
        if str(comment) != '':
            if mutetype == "—á" or mutetype == "—á–∞—Å–æ–≤" or mutetype == "—á–∞—Å" or mutetype == "—á–∞—Å–∞":
                await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=timedelta(hours=muteint))
                await message.answer(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüîá | –ó–∞–º—É—Ç–∏–ª(-–∞): {name2}\nüõ° Ô∏è| ID –Ω–∞–∫–∞–∑—É–µ–º–æ–≥–æ: <code>{message.reply_to_message.from_user.id}</code>\nüï∞ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞: {muteint} {mutetype}\nüí¨ | –ü—Ä–∏—á–∏–Ω–∞: {comment}')
            if mutetype == "–º" or mutetype == "–º–∏–Ω—É—Ç" or mutetype == "–º–∏–Ω—É—Ç—ã" or mutetype == "–º–∏–Ω—É—Ç–∞":
                await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=timedelta(minutes=muteint))
                await message.answer(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüîá | –ó–∞–º—É—Ç–∏–ª(-–∞): {name2}\nüõ° Ô∏è| ID –Ω–∞–∫–∞–∑—É–µ–º–æ–≥–æ: <code>{message.reply_to_message.from_user.id}</code>\nüï∞ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞: {muteint} {mutetype}\nüí¨ | –ü—Ä–∏—á–∏–Ω–∞: {comment}')
            if mutetype == "–¥" or mutetype == "–¥–Ω–µ–π" or mutetype == "–¥–µ–Ω—å" or mutetype == "–¥–Ω—è":
                await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=timedelta(days=muteint))
                await message.answer(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüîá | –ó–∞–º—É—Ç–∏–ª(-–∞): {name2}\nüõ° Ô∏è| ID –Ω–∞–∫–∞–∑—É–µ–º–æ–≥–æ: <code>{message.reply_to_message.from_user.id}</code>\nüï∞ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞: {muteint} {mutetype}\nüí¨ | –ü—Ä–∏—á–∏–Ω–∞: {comment}')
        else:
            if mutetype == "—á" or mutetype == "—á–∞—Å–æ–≤" or mutetype == "—á–∞—Å" or mutetype == "—á–∞—Å–∞": 
                await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=timedelta(hours=muteint))
                await message.answer(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüîá | –ó–∞–º—É—Ç–∏–ª(-–∞): {name2}\nüõ° Ô∏è| ID –Ω–∞–∫–∞–∑—É–µ–º–æ–≥–æ: <code>{message.reply_to_message.from_user.id}</code>\nüï∞ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞: {muteint} {mutetype}')
            if mutetype == "–º" or mutetype == "–º–∏–Ω—É—Ç" or mutetype == "–º–∏–Ω—É—Ç—ã" or mutetype == "–º–∏–Ω—É—Ç–∞":
                await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=timedelta(minutes=muteint))
                await message.answer(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüîá | –ó–∞–º—É—Ç–∏–ª(-–∞): {name2}\nüõ° Ô∏è| ID –Ω–∞–∫–∞–∑—É–µ–º–æ–≥–æ: <code>{message.reply_to_message.from_user.id}</code>\nüï∞ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞: {muteint} {mutetype}')
            if mutetype == "–¥" or mutetype == "–¥–Ω–µ–π" or mutetype == "–¥–µ–Ω—å" or mutetype == "–¥–Ω—è":
                await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(False), until_date=timedelta(days=muteint))
                await message.answer(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüîá | –ó–∞–º—É—Ç–∏–ª(-–∞): {name2}\nüõ° Ô∏è| ID –Ω–∞–∫–∞–∑—É–µ–º–æ–≥–æ: <code>{message.reply_to_message.from_user.id}</code>\nüï∞ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞: {muteint} {mutetype}')
    else:
        pass

#–ê–Ω–º—É—Ç
@dp.message_handler(commands=['–∞–Ω–º—É—Ç', '—Ä–∞–∑–º—É—Ç', 'unmute'], commands_prefix='!?./', is_chat_admin=True)
async def unmute(message):
    msg = message
    name1 = msg.from_user.get_mention()
    name2 = msg.reply_to_message.from_user.get_mention()
    mod_cmd = chats.cursor.execute("SELECT mod_cmd from chats where chat_id = ?", (message.chat.id,)).fetchone()
    mod_cmd = (mod_cmd[0])
    if str(mod_cmd) == '–¥–∞':
        if not message.reply_to_message:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return
        await bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(True, True, True, True))
        await message.reply(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüì¢ | –†–∞–∑–º—É—Ç–∏–ª(-–∞): {name2}')
        await bot.send_message(message.reply_to_message.from_user.id, f'‚úÖ | –í—ã –±–æ–ª—å—à–µ –Ω–µ –æ–±–µ–∑–∑–≤—É—á–µ–Ω—ã –≤ —á–∞—Ç–µ: @{message.chat.username}')
    else:
        pass

# –ë–∞–Ω | –ö–∏–∫
@dp.message_handler(commands=['–±–∞–Ω', 'ban'], commands_prefix='!?./', is_chat_admin=True)
async def ban(message):
    msg = message
    name1 = msg.from_user.get_mention()
    name2 = msg.reply_to_message.from_user.get_mention()
    mod_cmd = chats.cursor.execute("SELECT mod_cmd from chats where chat_id = ?", (message.chat.id,)).fetchone()
    mod_cmd = (mod_cmd[0])
    if str(mod_cmd) == '–¥–∞':
        if not message.reply_to_message:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return
        try:
            banint = int(message.text.split()[1])
            bantype = message.text.split()[2]
            comment = " ".join(message.text.split()[3:])
        except IndexError:
            await message.reply('‚ùé | –ü—Ä–∏–º–µ—Ä: <code>/–±–∞–Ω 1 —á –ø—Ä–∏—á–∏–Ω–∞</code>')
            return
        if str(comment) != '':
            if bantype == "—á" or bantype == "—á–∞—Å–æ–≤" or bantype == "—á–∞—Å" or bantype == "—á–∞—Å–∞": 
                await bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date=timedelta(hours=banint))
                await message.answer(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüîá | –ó–∞–±–∞–Ω–∏–ª(-–∞): {name2}\nüõ° Ô∏è| ID –Ω–∞–∫–∞–∑—É–µ–º–æ–≥–æ: <code>{message.reply_to_message.from_user.id}</code>\nüï∞ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞: {banint} {bantype}\nüí¨ | –ø–µ—Ç—É—à–∞—Ä—ã: {comment}')
            if bantype == "–º" or bantype == "–º–∏–Ω—É—Ç" or bantype == "–º–∏–Ω—É—Ç—ã" or bantype  == "–º–∏–Ω—É—Ç–∞":
                await bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date=timedelta(minutes=banint))
                await message.answer(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüîá | –ó–∞–±–∞–Ω–∏–ª(-–∞): {name2}\nüõ° Ô∏è| ID –ø–µ—Ç—É—à–∞—Ä—ã: <code>{message.reply_to_message.from_user.id}</code>\nüï∞ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞: {banint} {bantype}\nüí¨ | –ü—Ä–∏—á–∏–Ω–∞: {comment}')
            if bantype == "–¥" or bantype == "–¥–Ω–µ–π" or bantype == "–¥–µ–Ω—å" or bantype == "–¥–Ω—è":
                await bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date=timedelta(days=banint))
                await message.answer(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüîá | –ó–∞–±–∞–Ω–∏–ª(-–∞): {name2}\nüõ° Ô∏è| ID –ø–µ—Ç—É—à–∞—Ä—ã: <code>{message.reply_to_message.from_user.id}</code>\nüï∞ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞: {banint} {bantype}\nüí¨ | –ü—Ä–∏—á–∏–Ω–∞: {comment}')
        else:
            if bantype == "—á" or bantype == "—á–∞—Å–æ–≤" or bantype == "—á–∞—Å" or bantype == "—á–∞—Å–∞":
                await bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date=timedelta(hours=banint))
                await message.answer(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüîá | –ó–∞–±–∞–Ω–∏–ª(-–∞): {name2}\nüõ° Ô∏è| ID –ø–µ—Ç—É—à–∞—Ä—ã: <code>{message.reply_to_message.from_user.id}</code>\nüï∞ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞: {banint} {bantype}')
            if bantype == "–º" or bantype == "–º–∏–Ω—É—Ç" or bantype == "–º–∏–Ω—É—Ç—ã" or bantype == "–º–∏–Ω—É—Ç–∞":
                await bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date=timedelta(minutes=banint))
                await message.answer(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüîá | –ó–∞–±–∞–Ω–∏–ª(-–∞): {name2}\nüõ° Ô∏è| ID –ø–µ—Ç—É—à–∞—Ä—ã: <code>{message.reply_to_message.from_user.id}</code>\nüï∞ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞: {banint} {bantype}')
            if bantype == "–¥" or bantype == "–¥–Ω–µ–π" or bantype == "–¥–µ–Ω—å" or bantype == "–¥–Ω—è ":
                await bot.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id, until_date=timedelta(days=banint))
                await message.answer(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüîá | –ó–∞–±–∞–Ω–∏–ª(-–∞): {name2}\nüõ° Ô∏è| ID –ø–µ—Ç—É—à–∞—Ä—ã: <code>{message.reply_to_message.from_user.id}</code>\nüï∞ | –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞: {banint} {bantype}')
    else:
        pass

#–†–∞–∑–±–∞–Ω
@dp.message_handler(commands=['—Ä–∞–∑–±–∞–Ω', 'unban'], commands_prefix='!?./', is_chat_admin=True)
async def unban(message):
    msg = message
    name1 = msg.from_user.get_mention()
    name2 = msg.reply_to_message.from_user.get_mention()
    mod_cmd = chats.cursor.execute("SELECT mod_cmd from chats where chat_id = ?", (message.chat.id,)).fetchone()
    mod_cmd = (mod_cmd[0])
    if str(mod_cmd) == '–¥–∞':
        if not msg.reply_to_message:
            await msg.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return
        await bot.restrict_chat_member(msg.chat.id, msg.reply_to_message.from_user.id, types.ChatPermissions(True, True, True, True))
        await msg.reply(f'üë§ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {name1}\nüì¢ | –†–∞–∑–±–∞–Ω–∏–ª(-–∞): {name2}')
        await bot.send_message(message.reply_to_message.from_user.id, f'‚úÖ | –í—ã –±–æ–ª—å—à–µ –Ω–µ –∑–∞–±–∞–Ω–µ–Ω—ã –≤ —á–∞—Ç–µ: @{message.chat.username}')
    else:
        pass

#–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message_handler(chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP], commands=['del'], commands_prefix='!/')
async def delete_message(message: types.Message):
    admins_list = [admin.user.id for admin in await bot.get_chat_administrators(chat_id=message.chat.id)]
    if message.from_user.id in admins_list:
        mod_cmd = chats.cursor.execute("SELECT mod_cmd from chats where chat_id = ?", (message.chat.id,)).fetchone()
        mod_cmd = (mod_cmd[0])
        if str(mod_cmd) == '–¥–∞':
            msg_id = message.reply_to_message.message_id
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
            await message.answer(f'üó≥Ô∏è | –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!')
        else:
            pass

#–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
@dp.message_handler(lambda msg: msg.text.lower() == '–º–æ–∏ –∏–≥—Ä—ã')
async def mygames(message):
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        casino = users.cursor.execute("SELECT casino from users where id = ?", (message.from_user.id,)).fetchone()
        casino = (casino[0])
        kosti = users.cursor.execute("SELECT kosti from users where id = ?", (message.from_user.id,)).fetchone()
        kosti = (kosti[0])
        darts = users.cursor.execute("SELECT darts from users where id = ?", (message.from_user.id,)).fetchone()
        darts = (darts[0])
        bouling = users.cursor.execute("SELECT bouling from users where id = ?", (message.from_user.id,)).fetchone()
        bouling = (bouling[0])
        footbal = users.cursor.execute("SELECT footbal from users where id = ?", (message.from_user.id,)).fetchone()
        footbal = (footbal[0])
        basket = users.cursor.execute("SELECT basket from users where id = ?", (message.from_user.id,)).fetchone()
        basket = (basket[0])
        ohota = users.cursor.execute("SELECT ohota from users where id = ?", (message.from_user.id,)).fetchone()
        ohota = (ohota[0])
        slots = users.cursor.execute("SELECT slots from users where id = ?", (message.from_user.id,)).fetchone()
        slots = (slots[0])
        await message.answer(f"""üìà | –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –∏–≥—Ä
–ö–∞–∑–∏–Ω–æ: <b>{casino}</b> üé∞
–ö–æ—Å—Ç–∏: <b>{kosti}</b> üé≤
–î–∞—Ä—Ç—Å: <b>{darts}</b> üéØ
–ë–æ—É–ª–∏–Ω–≥: <b>{bouling}</b> üé≥
–§—É—Ç–±–æ–ª: <b>{footbal}</b> ‚öΩ
–ë–∞—Å–∫–µ—Ç–±–æ–ª: <b>{basket}</b> üèÄ
–û—Ö–æ—Ç–∞: <b>{ohota}</b> üî´
–°–ª–æ—Ç—ã: <b>{slots}</b> üß©""")

#–†–∞–∑—Ä–µ—à–∏—Ç—å –∏–≥—Ä—ã
@dp.message_handler(lambda msg: msg.text.lower() == '—Ä–∞–∑—Ä–µ—à–∏—Ç—å –∏–≥—Ä—ã')
async def games_on(message):
    name = message.from_user.get_mention()
    chat_username = message.chat.username
    admins_list = [admin.user.id for admin in await bot.get_chat_administrators(chat_id=message.chat.id)]
    stts = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (stts[0])
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        if message.from_user.id in admins_list or str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
            game_rule = chats.cursor.execute("SELECT game_rule from chats where chat_id = ?", (message.chat.id,)).fetchone()
            game_rule = (game_rule[0])
            if str(game_rule) == '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ':
                await message.reply(f'üéÆ‚ùó| –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —É–∂–µ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!')
            else:
                chats.cursor.execute('UPDATE chats SET game_rule = ? WHERE chat_id = ?', ("—Ä–∞–∑—Ä–µ—à–µ–Ω–æ", message.chat.id))
                chats.connect.commit()
                await message.answer(f'üéÆ‚úÖ | –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Ç–µ–ø–µ—Ä—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!')
                await bot.send_message(config.owner, f'{name} —Ä–∞–∑—Ä–µ—à–∏–ª –∏–≥—Ä—ã –≤ —á–∞—Ç–µ @{chat_username}')
        else:
            await message.reply(f'üëÆ‚Äç‚ôÇÔ∏è‚ùé | –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞!')

#–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–≥—Ä—ã
@dp.message_handler(lambda msg: msg.text.lower() == '–∑–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–≥—Ä—ã')
async def games_off(message):
    name = message.from_user.get_mention()
    chat_username = message.chat.username
    admins_list = [admin.user.id for admin in await bot.get_chat_administrators(chat_id=message.chat.id)]
    stts = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (stts[0])
    id = message.from_user.id
    users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
    if users.cursor.fetchone() is None:
        await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
    else:
        if message.from_user.id in admins_list or str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
            game_rule = chats.cursor.execute("SELECT game_rule from chats where chat_id = ?", (message.chat.id,)).fetchone()
            game_rule = (game_rule[0])
            if str(game_rule) == '–∑–∞–ø—Ä–µ—â–µ–Ω–æ':
                await message.reply(f'üéÆ‚ùó| –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —É–∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã!')
            else:
                chats.cursor.execute('UPDATE chats SET game_rule = ? WHERE chat_id = ?', ("–∑–∞–ø—Ä–µ—â–µ–Ω–æ", message.chat.id))
                chats.connect.commit()
                await message.answer(f'üéÆ‚ùé | –í —ç—Ç–æ–º —á–∞—Ç–µ –∏–≥—Ä—ã —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–µ—â–µ–Ω—ã!')
                await bot.send_message(config.owner, f'{name} –∑–∞–ø—Ä–µ—Ç–∏–ª –∏–≥—Ä—ã –≤ —á–∞—Ç–µ @{chat_username}')
        else:
            await message.reply(f'üëÆ‚Äç‚ôÇÔ∏è‚ùé | –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞!')

#–í—ã–¥–∞—Ç—å
@dp.message_handler(regexp=r"(^–í—ã–¥–∞—Ç—å|–≤—ã–¥–∞—Ç—å) ?(\d+)?")
async def vidat(message: types.Message):
    command_parse = re.compile(r"(^–í—ã–¥–∞—Ç—å|–≤—ã–¥–∞—Ç—å) ?(\d+)?")
    parsed = command_parse.match(message.text)
    suma = parsed.group(2)
    name1 = message.from_user.get_mention(as_html=True)
    name2 = message.reply_to_message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = suma
    data['user_id'] = message.reply_to_message.from_user.id
    stts = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (stts[0])
    if str(status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        if suma is None:
            await message.reply(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        else:
            users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
            await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {name1}\n–í—ã–¥–∞–ª: {suma} üí∞\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {name2}", parse_mode='html')
            await bot.send_message(config.owner, f'{name1} –≤—ã–¥–∞–ª {suma}üí∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {name2}')
    elif str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        if suma is None:
            await message.reply(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        else:
            users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
            await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {name1}\n–í—ã–¥–∞–ª: {suma} üí∞\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {name2}", parse_mode='html')
    else:
        await message.reply(f"üö´ | –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", parse_mode='html')
    users.connect.commit()

#–ó–∞–±—Ä–∞—Ç—å
@dp.message_handler(regexp=r"(^–ó–∞–±—Ä–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å) ?(\d+)?")
async def zabrat(message: types.Message):
    command_parse = re.compile(r"(^–ó–∞–±—Ä–∞—Ç—å|–∑–∞–±—Ä–∞—Ç—å) ?(\d+)?")
    parsed = command_parse.match(message.text)
    suma = parsed.group(2)
    name1 = message.from_user.get_mention(as_html=True)
    name2 = message.reply_to_message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = suma
    data['user_id'] = message.reply_to_message.from_user.id
    stts = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (stts[0])
    if str(status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        if suma is None:
            await message.reply(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        else:
            users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data)
            await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {name1}\n–ó–∞–±—Ä–∞–ª: {suma} üí∞\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name2}", parse_mode='html')
            await bot.send_message(config.owner, f'{name1} –∑–∞–±—Ä–∞–ª {suma}üí∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name2}')
    elif str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        if suma is None:
            await message.reply(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
        else:
            users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data)
            await message.answer(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {name1}\n–ó–∞–±—Ä–∞–ª: {suma} üí∞\n–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {name2}", parse_mode='html')
    else:
        await message.reply(f"üö´ | –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", parse_mode='html')
    users.connect.commit()

#–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å
@dp.message_handler(commands=['setbal'])
async def setbal(message: types.Message):
    args = message.get_args()
    summ = int(args)
    users.cursor.execute("SELECT balance FROM users WHERE id=?", (message.from_user.id,))
    data = users.cursor.fetchone()
    if data is None:
        await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
    stts = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (stts[0])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        reply = message.reply_to_message
        if reply:
            replyuser = reply.from_user
            users.cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (summ, replyuser.id,))
            users.connect.commit()
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {replyuser.full_name}\n–ò–∑–º–µ–Ω–ª–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞: {summ} üí∞")
    elif str(status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        reply = message.reply_to_message
        if reply:
            replyuser = reply.from_user
            users.cursor.execute(f'UPDATE users SET balance=? WHERE id=?', (args, replyuser.id,))
            users.connect.commit()
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {replyuser.full_name}\n–ò–∑–º–µ–Ω–ª–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞: {summ} üí∞")
        else:
            await message.reply(f"‚ùó | –ù–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–ø–ª–∞–π!")
    else:
        return await message.reply(f"‚ùó | –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")

#user_status
@dp.message_handler(commands=['user_status'])
async def set_user_status(message: types.Message):
    msg = message
    id = msg.from_user.id
    stata = msg.get_args()
    status = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (status[0])
    name_link = users.cursor.execute("SELECT name from users where id = ?", (msg.reply_to_message.from_user.id,)).fetchone()
    name_link = (name_link[0])
    status_rep = users.cursor.execute("SELECT status from users where id = ?", (msg.reply_to_message.from_user.id,)).fetchone()
    status_rep = (status_rep[0])
    emoji = random.choice(["üòê", "ü§®", "üòî", "üòü"])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞' or int(id) == config.owner:
        if str(stata) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞' or str(stata) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' or str(stata) == 'VIP —é–∑–µ—Ä' or str(stata) == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
            users.cursor.execute('UPDATE users SET status = ? WHERE id = ?', (stata, msg.reply_to_message.from_user.id))
            users.connect.commit()
            await msg.answer(f'‚úÖ | –£—Å–ø–µ—à–Ω–æ!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name_link}\n–ü–æ–ª—É—á–∏–ª(-–∞) —Å—Ç–∞—Ç—É—Å: {stata}')
        else:
            await msg.reply(f'{emoji} | –¢–∞–∫–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ—Ç!\n–í–≤–µ–¥–∏—Ç–µ "—Å—Ç–∞—Ç—É—Å—ã", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤')
    elif str(status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        if msg['reply_to_message']['from']['id'] != msg['from']['id']:
            if str(stata) == 'VIP —é–∑–µ—Ä' or str(stata) == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å':
                if str(stata_rep) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞' or str(stata_rep) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
                    users.cursor.execute('UPDATE users SET status = ? WHERE id = ?', (stata, msg.reply_to_message.from_user.id))
                    users.connect.commit()
                    await msg.answer(f'‚úÖ | –£—Å–ø–µ—à–Ω–æ!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name_link}\n–ü–æ–ª—É—á–∏–ª(-–∞) —Å—Ç–∞—Ç—É—Å: {stata}')
                else:
                    await msg.reply(f'{emoji} | –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–Ω–≥, —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
            else:
                await msg.reply(f'{emoji} | –¢–∞–∫–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ—Ç –∏–ª–∏ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–Ω–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
        else:
            await msg.reply(f'{emoji} | –ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∞–º–æ–º—É —Å–µ–±–µ')
    else:
        await msg.reply(f'{emoji} | –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!')

#chat_status
@dp.message_handler(commands=['chat_status'])
async def set_chat_status(message: types.Message):
    msg = message
    stata = msg.get_args()
    status = users.cursor.execute("SELECT status from users where id = ?", (message.from_user.id,)).fetchone()
    status = (status[0])
    chat_status = chats.cursor.execute("SELECT chat_status from chats where chat_id = ?", (msg.chat.id,)).fetchone()
    chat_status = (chat_status[0])
    emoji = random.choice(["üòê", "ü§®", "üòî", "üòü"])
    if str(status) == '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞':
        if str(stata) == '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π' or str(stata) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π' or str(stata) == 'VIP —á–∞—Ç' or str(stata) == '–û–±—ã—á–Ω—ã–π':
            chats.cursor.execute('UPDATE chats SET chat_status = ? WHERE chat_id = ?', (stata, msg.chat.id))
            chats.connect.commit()
            await msg.answer(f'‚úÖ | –£—Å–ø–µ—à–Ω–æ!\n–≠—Ç–æ—Ç —á–∞—Ç –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å: {stata}')
        else:
            await msg.reply(f'{emoji} | –¢–∞–∫–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ—Ç!\n–í–≤–µ–¥–∏—Ç–µ "—Å—Ç–∞—Ç—É—Å—ã", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤')
    elif str(status) == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä':
        if str(stata) == '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π' or str(stata) == 'VIP —á–∞—Ç' or str(stata) == '–û–±—ã—á–Ω—ã–π':
            if str(chat_status) != '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π':
                chats.cursor.execute('UPDATE chats SET chat_status = ? WHERE chat_id = ?', (stata, msg.chat.id))
                chats.connect.commit()
                await msg.answer(f'‚úÖ | –£—Å–ø–µ—à–Ω–æ!\n–≠—Ç–æ—Ç —á–∞—Ç –ø–æ–ª—É—á–∏–ª —Å—Ç–∞—Ç—É—Å: {stata}')
            else:
                await msg.reply(f'{emoji} | –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–Ω–≥, —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å —ç—Ç–æ–≥–æ —á–∞—Ç–∞!')
        else:
            await msg.reply(f'{emoji} | –¢–∞–∫–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–µ—Ç –∏–ª–∏ —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Ä–∞–Ω–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–≥–æ —á–∞—Ç–∞!')
    else:
        await msg.reply(f'{emoji} | –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!')

#–†–∞–Ω–¥–æ–º
@dp.message_handler(regexp=r"(^–í—ã–±–µ—Ä–∏|–≤—ã–±–µ—Ä–∏) (^–û—Ç|–æ—Ç) ?(\d+)? (^–î–æ|–¥–æ) ?(\d+)?")
async def random_vybor(message: types.Message):

    name1 = message.from_user.get_mention(as_html=True)
    command_parse = re.compile(r"(^–í—ã–±–µ—Ä–∏|–≤—ã–±–µ—Ä–∏) (^–û—Ç|–æ—Ç) ?(\d+)? (^–î–æ|–¥–æ) ?(\d+)?")

    parsed = command_parse.match(message.text)
    random1 = parsed.group(3)
    random2 = parsed.group(5)
    rand1 = int(random1)
    rand2 = int(random2)
    
    rand = int(randint(rand1, rand2))
    try:
        await message.answer(f"üé± | {name1}, —è –≤—ã–±–∏—Ä–∞—é - <b>{rand}</b>")
    except:
        await message.reply(f'‚ùé | –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞!\n–ü—Ä–∏–º–µ—Ä:<code>–í—ã–±–µ—Ä–∏ –æ—Ç 1 –¥–æ 100</code>')
        return

#–°–ª–æ—Ç—ã
@dp.message_handler(regexp=r"(^–°–ª–æ—Ç—ã|—Å–ª–æ—Ç—ã) ?(\d+)?")
async def slots(message: types.Message):
    msg = message
    name1 = message.from_user.get_mention(as_html=True)
    command_parse = re.compile(r"(^–°–ª–æ—Ç—ã|—Å–ª–æ—Ç—ã) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    summ = int(summ)
    balance = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
    balance = (balance[0])
    stavka = users.cursor.execute("SELECT stavka from users where id = ?", (message.from_user.id,)).fetchone()
    stavka = (stavka[0])
    sm = ["üç¨", "üíé", "‚òÉÔ∏è", "üç≠", "üîÆÔ∏è"]
    one = random.choice(sm)
    two = random.choice(sm)
    three = random.choice(sm)
    ss = await message.answer(f'–°—Ç–∞–≤–∫–∞: <code>{summ}üí∞</code>\n\n        |üå´Ô∏è|üå´Ô∏è|üå´Ô∏è|', parse_mode='html')
    if message.chat.type == 'private':
        if int(summ) <= int(stavka):
            if int(balance) >= summ:
                await asyncio.sleep(2)
                await ss.edit_text(f'–°—Ç–∞–≤–∫–∞: <code>{summ}üí∞</code>\n\n        |{one}|üå´Ô∏è|üå´Ô∏è|')
                await asyncio.sleep(2)
                await ss.edit_text(f'–°—Ç–∞–≤–∫–∞: <code>{summ}üí∞</code>\n\n        |{one}|{two}|üå´Ô∏è|')
                await asyncio.sleep(2)
                await ss.edit_text(f'–°—Ç–∞–≤–∫–∞: <code>{summ}üí∞</code>\n\n        |{one}|{two}|{three}|')
                await asyncio.sleep(1)
                if((one == "üç¨") and (two == "üç¨") and (three == "üç¨")):
                    summ2 = summ * 3
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text( f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–æ —Ç—Ä–∏ –ø–æ–¥—Ä—è–¥!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one == "üç¨") and (two == "üç¨") and (three != "üç¨")):
                    summ2 = summ * 2
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one != "üç¨") and (two == "üç¨") and (three == "üç¨")):
                    summ2 = summ * 2
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>')      
                elif((one == "üíé") and (two == "üíé") and (three == "üíé")):
                    summ2 = summ * 7
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–æ —Ç—Ä–∏ –ø–æ–¥—Ä—è–¥!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one == "üíé") and (two == "üíé") and (three != "üíé")):
                    summ2 = summ * 2
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one != "üíé") and (two == "üíé") and (three == "üíé")):
                    summ2 = summ * 2
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one == "‚òÉÔ∏è") and (two == "‚òÉÔ∏è") and (three == "‚òÉÔ∏è")):
                    summ2 = summ * 3
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–æ —Ç—Ä–∏ –ø–æ–¥—Ä—è–¥!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one == "‚òÉÔ∏è") and (two == "‚òÉÔ∏è") and (three != "‚òÉÔ∏è")):
                    summ2 = summ * 2
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one != "‚òÉÔ∏è") and (two == "‚òÉÔ∏è") and (three == "‚òÉÔ∏è")):
                    summ2 = summ * 2
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one == "üç≠") and (two == "üç≠") and (three == "üç≠")):
                    summ2 = summ * 2
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–æ —Ç—Ä–∏ –ø–æ–¥—Ä—è–¥!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one == "üç≠") and (two == "üç≠") and (three != "üç≠")):
                    summ2 = summ * 1
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one != "üç≠") and (two == "üç≠") and (three == "üç≠")):
                    summ2 = summ * 1
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one == "üîÆÔ∏è") and (two == "üîÆÔ∏è") and (three == "üîÆÔ∏è")):
                    summ2 = summ * 2
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–æ —Ç—Ä–∏ –ø–æ–¥—Ä—è–¥!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one == "üîÆÔ∏è") and (two == "üîÆÔ∏è") and (three != "üîÆÔ∏è")):
                    summ2 = summ * 1
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif((one != "üîÆÔ∏è") and (two == "üîÆÔ∏è") and (three == "üîÆÔ∏è")):
                    summ2 = summ * 1
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                else:
                    summ2 = summ * 1
                    data = {}
                    data["suma"] = int(summ2)
                    data['user_id'] = message.from_user.id
                    users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                    await ss.edit_text(f'{name1}, —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç!\n\n        |{one}|{two}|{three}|\n\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
            elif int(balance) < summ:
                await ss.edit_text(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞', parse_mode='html')
        else:
            await ss.edit_text(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞', parse_mode='html')
    else:
        game_rule = chats.cursor.execute("SELECT game_rule from chats where chat_id = ?", (msg.chat.id,)).fetchone()
        game_rule = (game_rule[0])
        if str(game_rule) == '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ':
            if int(summ) <= int(stavka):
                if int(balance) >= summ:
                    await asyncio.sleep(2)
                    await ss.edit_text(f'–°—Ç–∞–≤–∫–∞: {summ}üí∞\n\n        |{one}|üå´Ô∏è|üå´Ô∏è|')
                    await asyncio.sleep(2)
                    await ss.edit_text(f'–°—Ç–∞–≤–∫–∞: {summ}üí∞\n\n        |{one}|{two}|üå´Ô∏è|')
                    await asyncio.sleep(2)
                    await ss.edit_text(f'–°—Ç–∞–≤–∫–∞: {summ}üí∞\n\n        |{one}|{two}|{three}|')
                    await asyncio.sleep(1)
                    if((one == "üç¨") and (two == "üç¨") and (three == "üç¨")):
                        summ2 = summ * 3
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text( f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–æ —Ç—Ä–∏ –ø–æ–¥—Ä—è–¥!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one == "üç¨") and (two == "üç¨") and (three != "üç¨")):
                        summ2 = summ * 2
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one != "üç¨") and (two == "üç¨") and (three == "üç¨")):
                        summ2 = summ * 2
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>')      
                    elif((one == "üíé") and (two == "üíé") and (three == "üíé")):
                        summ2 = summ * 7
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–æ —Ç—Ä–∏ –ø–æ–¥—Ä—è–¥!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one == "üíé") and (two == "üíé") and (three != "üíé")):
                        summ2 = summ * 2
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one != "üíé") and (two == "üíé") and (three == "üíé")):
                        summ2 = summ * 2
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one == "‚òÉÔ∏è") and (two == "‚òÉÔ∏è") and (three == "‚òÉÔ∏è")):
                        summ2 = summ * 3
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–æ —Ç—Ä–∏ –ø–æ–¥—Ä—è–¥!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one == "‚òÉÔ∏è") and (two == "‚òÉÔ∏è") and (three != "‚òÉÔ∏è")):
                        summ2 = summ * 2
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one != "‚òÉÔ∏è") and (two == "‚òÉÔ∏è") and (three == "‚òÉÔ∏è")):
                        summ2 = summ * 2
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one == "üç≠") and (two == "üç≠") and (three == "üç≠")):
                        summ2 = summ * 2
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–æ —Ç—Ä–∏ –ø–æ–¥—Ä—è–¥!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one == "üç≠") and (two == "üç≠") and (three != "üç≠")):
                        summ2 = summ * 1
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one != "üç≠") and (two == "üç≠") and (three == "üç≠")):
                        summ2 = summ * 1
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        {one}|{two}|{three}\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one == "üîÆÔ∏è") and (two == "üîÆÔ∏è") and (three == "üîÆÔ∏è")):
                        summ2 = summ * 2
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–æ —Ç—Ä–∏ –ø–æ–¥—Ä—è–¥!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one == "üîÆÔ∏è") and (two == "üîÆÔ∏è") and (three != "üîÆÔ∏è")):
                        summ2 = summ * 1
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    elif((one != "üîÆÔ∏è") and (two == "üîÆÔ∏è") and (three == "üîÆÔ∏è")):
                        summ2 = summ * 1
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, –≤–∞–º –≤—ã–ø–∞–ª–∞ –ø–∞—Ä–∞!\n\n        |{one}|{two}|{three}|\n\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                    else:
                        summ2 = summ * 1
                        data = {}
                        data["suma"] = int(summ2)
                        data['user_id'] = message.from_user.id
                        users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET slots = slots + 1 WHERE id=?', (message.from_user.id,))
                        await ss.edit_text(f'{name1}, —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç!\n\n        |{one}|{two}|{three}|\n\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <code>{summ2}üí∞</code>', parse_mode='html')
                elif int(balance) < summ:
                    await ss.edit_text(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞', parse_mode='html')
            else:
                await ss.edit_text(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞', parse_mode='html')
        else:
            await ss.edit_text(f'üö´ | –í —ç—Ç–æ–º —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏–≥—Ä–∞—Ç—å!')


# @Penggrin
def get_casino_values(dice_value):
    casino = ["BAR", "–í–∏–Ω–æ–≥—Ä–∞–¥", "–õ–∏–º–æ–Ω", "–°–µ–º—å"]
    return [casino[(dice_value - 1) // i % 4] for i in (1, 4, 16)]


# @Penggrin
def get_casino_result(dice, bet, bonus_users):
    data = get_casino_values(dice)

    if not (data[0] == data[1] == data[2]):
        return (False, bet, data)
    
    if data[0] == "–°–µ–º—å":
        return (True, bet * (10 + (0.35 * bonus_users)), data)

    return (True, bet * (5 + (0.35 * bonus_users)), data)
    


#–ö–∞–∑–∏–Ω–æ (@Penggrin)
@rate_limit(limit=1.5)
@dp.message_handler(regexp=r"(^–ö–∞–∑–∏–Ω–æ|–∫–∞–∑–∏–Ω–æ) ?(\d+)?")
async def kazino(message: types.Message):
    stavka = int((users.cursor.execute("SELECT stavka from users where id = ?", (message.from_user.id,)).fetchone())[0])
    balance = int((users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone())[0])
    invited_users = int((users.cursor.execute("SELECT invited_users from users where id = ?", (message.from_user.id,)).fetchone())[0])

    name = message.from_user.get_mention(as_html=True)
    args = message.text.lower().split()

    if len(args) < 2:
        await message.reply("‚ùé | –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Ç–∞–≤–∫—É!")
        return

    if int(args[1]) < 1:
        await message.reply("‚ùé | –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω—É–ª—è!")
        return

    bet = int(args[1])

    if message.chat.type != 'private':
        game_rule = chats.cursor.execute("SELECT game_rule from chats where chat_id = ?", (message.chat.id,)).fetchone()
        game_rule = (game_rule[0])
        if game_rule != "—Ä–∞–∑—Ä–µ—à–µ–Ω–æ":
            await message.reply(f'üö´ | –í —ç—Ç–æ–º —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏–≥—Ä–∞—Ç—å!')
            return

    if bet > stavka:
        await message.reply(f'‚ùé | –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞')
        return
    if balance < bet:
        await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞')
        return

    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
    users.cursor.execute(f'UPDATE users SET casino = casino + 1 WHERE id=?', (message.from_user.id,))
    if message.chat.type != 'private':
        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))

    dice = (await bot.send_dice(message.chat.id, emoji="üé∞")).dice.value
    result = get_casino_result(dice, bet, invited_users)
    await sleep(2)
    if result[0]: # 7-7-7, bar-bar-bar, etc
        users.cursor.execute(
            """UPDATE users SET balance = :sum WHERE id = :user_id;""",
            {"user_id": message.from_user.id, "sum": balance + result[1]}
        )

        await message.reply(
            f'üé∞ | –í–∞–º –≤—ã–ø–∞–ª–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {result[2][0]}, {result[2][1]}, {result[2][2]} (‚Ññ{dice})\n'
            f'üí∏ | –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{result[1]}üí∞</b>\n'
            f'üí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance + result[1]}üí∞</b>',
            parse_mode='html'
        )
    else: # 7-bar-bar, bar-7-7, etc
        users.cursor.execute(
            """UPDATE users SET balance = :sum WHERE id = :user_id;""",
            {"user_id": message.from_user.id, "sum": balance - result[1]}
        )

        await message.reply(
            f'üé∞ | –í–∞–º –≤—ã–ø–∞–ª–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {result[2][0]}, {result[2][1]}, {result[2][2]} (‚Ññ{dice})\n'
            f'üí∏ | –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{result[1]}üí∞</b>\n'
            f'üí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{balance - result[1]}üí∞</b>',
            parse_mode='html'
        )

    users.connect.commit()
    if message.chat.type != 'private':
        chats.connect.commit()


#–ö—É–±
@dp.message_handler(regexp=r"(^–ö—É–±|–∫—É–±) ?(\d+)? ?(\d+)?")
async def kub(message: types.Message):
    msg = message
    command_parse = re.compile(r"(^–ö—É–±|–∫—É–±) ?(\d+)? ?(\d+)?")
    parsed = command_parse.match(message.text)
    stavka = users.cursor.execute("SELECT stavka from users where id = ?", (message.from_user.id,)).fetchone()
    stavka = (stavka[0])
    dice_value = parsed.group(2)
    dice_value = int(dice_value)
    summ = parsed.group(3)
    summ = int(summ)
    name1 = message.from_user.get_mention(as_html=True)
    if message.chat.type == 'private':
        if summ <= int(stavka):
            if dice_value > 6:
                await message.reply(f"‚ùé | –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n<b>–ö—É–± (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6) (—Å—Ç–∞–≤–∫–∞)</b>", parse_mode='html')
            else:
                if not summ:
                    await message.reply(f"‚ùé | –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n<b>–ö—É–± (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6) (—Å—Ç–∞–≤–∫–∞)</b>", parse_mode='html')
                else:
                    if not dice_value:
                        await message.reply(f"‚ùé | –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>–ö—É–± (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6) (—Å—Ç–∞–≤–∫–∞)</b>", parse_mode='html')
                    else:
                        balance = (users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone())[0]
                        invited_users = (users.cursor.execute("SELECT invited_users from users where id = ?", (message.from_user.id,)).fetchone())[0]
                        if balance >= summ:
                            dice_value = int(dice_value)
                            bot_data = await bot.send_dice (message.chat.id)
                            bot_data = bot_data['dice']['value']
                            plus = bot_data + 1
                            minus = bot_data - 1
                            summ2 = summ * 10
                            data = {}
                            data["suma"] = summ
                            data['user_id'] = message.from_user.id
                            data1 = {}
                            data1["suma"] = summ2
                            data1['user_id'] = message.from_user.id
                            await sleep(5)

                            if bot_data > dice_value:
                                await message.reply(f'üé≤‚ùå | –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{summ}üí∞</b>', parse_mode='html')
                                users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data)
                                users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                                users.cursor.execute(f'UPDATE users SET kosti = kosti + 1 WHERE id=?', (message.from_user.id,))
                            elif bot_data < dice_value:
                                await message.reply(f'üé≤‚ùå | –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{summ}üí∞</b>', parse_mode='html')
                                users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data)
                                users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                                users.cursor.execute(f'UPDATE users SET kosti = kosti + 1 WHERE id=?', (message.from_user.id,))
                            else:
                                await message.reply(f'üé≤‚úÖ | –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{summ * (2 + (0.35 * invited_users))}üí∞</b>', parse_mode='html')
                                users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                                    {"suma": summ * (5 + (0.35 * invited_users)), "user_id": message.from_user.id}
                                )
                                users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                                users.cursor.execute(f'UPDATE users SET kosti = kosti + 1 WHERE id=?', (message.from_user.id,))
                                users.connect.commit()
                        elif balance < summ:
                            balanc = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
                            balance = (balanc[0])
                            await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞', parse_mode='html')
        else:
            await message.reply(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞', parse_mode='html')
    else:
        game_rule = chats.cursor.execute("SELECT game_rule from chats where chat_id = ?", (msg.chat.id,)).fetchone()
        game_rule = (game_rule[0])
        if str(game_rule) == '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ':
            if summ <= int(stavka):
                if dice_value > 6:
                    await message.reply(f"‚ùé | –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n<b>–ö—É–± (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6) (—Å—Ç–∞–≤–∫–∞)</b>", parse_mode='html')
                else:
                    if not summ:
                        await message.reply(f"‚ùé | –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n<b>–ö—É–± (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6) (—Å—Ç–∞–≤–∫–∞)</b>", parse_mode='html')
                    else:
                        if not dice_value:
                            await message.reply(f"‚ùé | –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>–ö—É–± (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6) (—Å—Ç–∞–≤–∫–∞)</b>", parse_mode='html')
                        else:
                            balanc = (users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone())[0]
                            invited_users = (users.cursor.execute("SELECT invited_users from users where id = ?", (message.from_user.id,)).fetchone())[0]
                            if balance >= summ:
                                dice_value = int(dice_value)
                                bot_data = await bot.send_dice (message.chat.id)
                                bot_data = bot_data['dice']['value']
                                plus = bot_data + 1
                                minus = bot_data - 1
                                summ2 = summ * 10
                                data = {}
                                data["suma"] = summ
                                data['user_id'] = message.from_user.id
                                data1 = {}
                                data1["suma"] = summ2
                                data1['user_id'] = message.from_user.id
                                await sleep(5)

                                if bot_data > dice_value:
                                    await message.reply(f'üé≤‚ùå | –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{summ}üí∞</b>', parse_mode='html')
                                    users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data)
                                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                                    users.cursor.execute(f'UPDATE users SET kosti = kosti + 1 WHERE id=?', (message.from_user.id,))
                                    chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                                    users.connect.commit()
                                    chats.connect.commit()
                                elif bot_data < dice_value:
                                    await message.reply(f'üé≤‚ùå | –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{summ}üí∞</b>', parse_mode='html')
                                    users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data)
                                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                                    users.cursor.execute(f'UPDATE users SET kosti = kosti + 1 WHERE id=?', (message.from_user.id,))
                                    chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                                    users.connect.commit()
                                    chats.connect.commit()
                                else:
                                    await message.reply(f'üé≤‚úÖ | –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{summ * (2 + (0.35 * invited_users))}üí∞</b>', parse_mode='html')
                                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                                        {"suma": summ * (5 + (0.35 * invited_users)), "user_id": message.from_user.id}
                                    )
                                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                                    users.cursor.execute(f'UPDATE users SET kosti = kosti + 1 WHERE id=?', (message.from_user.id,))
                                    chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                                    users.connect.commit()
                                    chats.connect.commit()
                            elif balance < summ:
                                balanc = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
                                balance = (balanc[0])
                                await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞', parse_mode='html')
            else:
                await message.reply(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞', parse_mode='html')
        else:
            await message.reply(f'üö´ | –í —ç—Ç–æ–º —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏–≥—Ä–∞—Ç—å!')

#–î–∞—Ä—Ç—Å
@dp.message_handler(regexp=r"(^–î–∞—Ä—Ç—Å|–¥–∞—Ä—Ç—Å) ?(\d+)?")
async def darts(message: types.Message):
    msg = message
    command_parse = re.compile(r"(^–î–∞—Ä—Ç—Å|–¥–∞—Ä—Ç—Å) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    name1 = message.from_user.get_mention(as_html=True)
    summ = int(summ)
    suma = int(summ) * 2
    name1 = message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = suma
    data['user_id'] = message.from_user.id
    data1 = {}
    data1["suma"] = summ
    data1['user_id'] = message.from_user.id
    balance = (users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone())[0]
    stavka = (users.cursor.execute("SELECT stavka from users where id = ?", (message.from_user.id,)).fetchone())[0]
    invited_users = (users.cursor.execute("SELECT invited_users from users where id = ?", (message.from_user.id,)).fetchone())[0]

    if message.chat.type == 'private':
        if balance >= summ:
            if summ <= int(stavka):
                bot_data = await bot.send_dice(message.chat.id, emoji='üéØ')
                bot_data = bot_data['dice']['value']
                await sleep(3)
                if bot_data == 6:
                    await message.reply(f'üéØ‚úÖ | –í—ã –ø–æ–ø–∞–ª–∏ –ø—Ä—è–º–æ –≤ —Ü–µ–ª—å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{summ * (2 + (0.35 * invited_users))}</b>üí∞', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                        {"suma": summ * (2 + (0.35 * invited_users)), "user_id": message.from_user.id}
                    )
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET darts = darts + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
                elif bot_data == 1:
                    await message.reply(f'üéØ‚ùå | –¢–∞–∫–æ–π —Å–µ–±–µ –±—Ä–æ—Å–æ–∫, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å')
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET darts = darts + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
                else:
                    await message.reply(f'üéØ‚ùå | –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{summ}</b>üí∞', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data1)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET darts = darts + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
            else:
                await message.reply(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞', parse_mode='html')
        else:
            await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞', parse_mode='html')
    else:
        game_rule = chats.cursor.execute("SELECT game_rule from chats where chat_id = ?", (msg.chat.id,)).fetchone()
        game_rule = (game_rule[0])
        if str(game_rule) == '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ':
            if balance >= summ:
                if summ <= (stavka):
                    bot_data = await bot.send_dice(message.chat.id, emoji='üéØ')
                    bot_data = bot_data['dice']['value']
                    await sleep(3)
                    if bot_data == 6:
                        await message.reply(f'üéØ‚úÖ | –í—ã –ø–æ–ø–∞–ª–∏ –ø—Ä—è–º–æ –≤ —Ü–µ–ª—å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{summ * (2 + (0.35 * invited_users))}</b>üí∞', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                            {"suma": summ * (2 + (0.35 * invited_users)), "user_id": message.from_user.id}
                        )
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET darts = darts + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                    elif bot_data == 1:
                        await message.reply(f'üéØ‚ùå | –¢–∞–∫–æ–π —Å–µ–±–µ –±—Ä–æ—Å–æ–∫, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å')
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET darts = darts + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                    else:
                        await message.reply(f'üéØ‚ùå | –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{summ}</b>üí∞', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data1)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET darts = darts + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                else:
                    await message.reply(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞', parse_mode='html')
            else:
                await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞', parse_mode='html')
        else:
            await message.reply(f'üö´ | –í —ç—Ç–æ–º —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏–≥—Ä–∞—Ç—å!')

#–ë–æ—É–ª
@dp.message_handler(regexp=r"(^–ë–æ—É–ª|–±–æ—É–ª) ?(\d+)?")
async def boul(message: types.Message):
    msg = message
    command_parse = re.compile(r"(^–ë–æ—É–ª|–±–æ—É–ª) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    summ = int(summ)
    suma = int(summ) * 2
    name1 = message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = suma
    data['user_id'] = message.from_user.id
    data1 = {}
    data1["suma"] = summ
    data1['user_id'] = message.from_user.id
    balanc = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
    balance = (balanc[0])
    stavka = users.cursor.execute("SELECT stavka from users where id = ?", (message.from_user.id,)).fetchone()
    stavka = (stavka[0])
    invited_users = users.cursor.execute("SELECT invited_users from users where id = ?", (message.from_user.id,)).fetchone()
    invited_users = (invited_users[0])
    if message.chat.type == 'private':
        if balance >= summ:
            if summ <= int(stavka):
                bot_data = await bot.send_dice(message.chat.id, emoji='üé≥')
                bot_data = bot_data['dice']['value']
                await sleep(3)
                if bot_data == 6:
                    await message.reply(f'üé≥üí• | –í—ã —Å–±–∏–ª–∏ –≤—Å–µ –∫–µ–≥–ª–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{summ * (2 + (0.35 * invited_users))}</b>üí∞', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                        {"suma": summ * (2 + (0.35 * invited_users)), "user_id": message.from_user.id}
                    )
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET bouling = bouling + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
                elif bot_data == 1:
                    await message.reply(f'üé≥‚ùå | –¢–∞–∫–æ–π —Å–µ–±–µ –±—Ä–æ—Å–æ–∫, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å')
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET bouling = bouling + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
                else:
                    await message.reply(f'üé≥‚ùå | –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{summ}</b>üí∞', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data1)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET bouling = bouling + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
            else:
                await message.reply(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞', parse_mode='html')
        elif balance < summ:
            balanc = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
            balance = (balanc[0])
            await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞', parse_mode='html')
    else:
        game_rule = chats.cursor.execute("SELECT game_rule from chats where chat_id = ?", (msg.chat.id,)).fetchone()
        game_rule = (game_rule[0])
        if str(game_rule) == '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ':
            if balance >= summ:
                if summ <= int(stavka):
                    bot_data = await bot.send_dice(message.chat.id, emoji='üé≥')
                    bot_data = bot_data['dice']['value']
                    await sleep(3)
                    if bot_data == 6:
                        await message.reply(f'üé≥üí• | –í—ã —Å–±–∏–ª–∏ –≤—Å–µ –∫–µ–≥–ª–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{summ * (2 + (0.35 * invited_users))}</b>üí∞', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                            {"suma": summ * (2 + (0.35 * invited_users)), "user_id": message.from_user.id}
                        )
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET bouling = bouling + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                    elif bot_data == 1:
                        await message.reply(f'üé≥‚ùå | –¢–∞–∫–æ–π —Å–µ–±–µ –±—Ä–æ—Å–æ–∫, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å')
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET bouling = bouling + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                    else:
                        await message.reply(f'üé≥‚ùå | –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{summ}</b>üí∞', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data1)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET bouling = bouling + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                else:
                    await message.reply(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞', parse_mode='html')
            elif balance < summ:
                            balanc = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
                            balance = (balanc[0])
                            await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞', parse_mode='html')
        else:
            await message.reply(f'üö´ | –í —ç—Ç–æ–º —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏–≥—Ä–∞—Ç—å!')

#–§—É—Ç
@dp.message_handler(regexp=r"(^–§—É—Ç|—Ñ—É—Ç) ?(\d+)?")
async def football(message: types.Message):
    msg = message
    command_parse = re.compile(r"(^–§—É—Ç|—Ñ—É—Ç) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    name1 = message.from_user.get_mention(as_html=True)
    data = {}
    summ = int(summ)
    data["suma"] = summ
    data['user_id'] = message.from_user.id
    balanc = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
    balance = (balanc[0])
    stavka = users.cursor.execute("SELECT stavka from users where id = ?", (message.from_user.id,)).fetchone()
    stavka = (stavka[0])
    invited_users = int((users.cursor.execute("SELECT invited_users from users where id = ?", (message.from_user.id,)).fetchone())[0])
    if message.chat.type == 'private':
        if balance >= summ:
            if summ <= int(stavka):
                bot_data = await bot.send_dice(message.chat.id, emoji='‚öΩ')
                bot_data = bot_data['dice']['value']
                await sleep(4)
                if bot_data >= 3:
                    await message.reply(f'‚öΩ‚úÖ | –í—ã –ø–æ–ø–∞–ª–∏ –ø—Ä—è–º–æ –≤ –≤–æ—Ä–æ—Ç–∞ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{summ * (1 + (0.35 * invited_users))}</b>üí∞', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                        {"suma": summ * (1 + (0.35 * invited_users)), "user_id": message.from_user.id}
                    )
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET footbal = footbal + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
                else:
                    await message.reply(f'‚öΩ‚ùå | –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{summ}</b>üí∞', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET footbal = footbal + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
            else:
                await message.reply(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞', parse_mode='html')
        elif balance < summ:
            balanc = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
            balance = (balanc[0])
            await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞', parse_mode='html')
    else:
        game_rule = chats.cursor.execute("SELECT game_rule from chats where chat_id = ?", (msg.chat.id,)).fetchone()
        game_rule = (game_rule[0])
        if str(game_rule) == '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ':
            if balance >= summ:
                if summ <= int(stavka):
                    bot_data = await bot.send_dice(message.chat.id, emoji='‚öΩ')
                    bot_data = bot_data['dice']['value']
                    await sleep(4)
                    if bot_data >= 3:
                        await message.reply(f'‚öΩ‚úÖ | –í—ã –ø–æ–ø–∞–ª–∏ –ø—Ä—è–º–æ –≤ –≤–æ—Ä–æ—Ç–∞ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{summ * (1 + (0.35 * invited_users))}</b>üí∞', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                            {"suma": summ * (1 + (0.35 * invited_users)), "user_id": message.from_user.id}
                        )
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET footbal = footbal + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        users.connect.commit()
                        chats.connect.commit()
                    else:
                        await message.reply(f'‚öΩ‚ùå | –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{summ}</b>üí∞', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET footbal = footbal + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        users.connect.commit()
                        chats.connect.commit()
                else:
                    await message.reply(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞', parse_mode='html')
            elif balance < summ:
                            balanc = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
                            balance = (balanc[0])
                            await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞', parse_mode='html')
        else:
            await message.reply(f'üö´ | –í —ç—Ç–æ–º —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏–≥—Ä–∞—Ç—å!')

#–ë–∞—Å–∫–µ—Ç
@dp.message_handler(regexp=r"(^–ë–∞—Å|–±–∞—Å|–ë–∞—Å–∫–µ—Ç|–±–∞—Å–∫–µ—Ç) ?(\d+)?")
async def basket(message: types.Message):
    msg = message
    command_parse = re.compile(r"(^–ë–∞—Å|–±–∞—Å|–ë–∞—Å–∫–µ—Ç|–±–∞—Å–∫–µ—Ç) ?(\d+)?")
    parsed = command_parse.match(message.text)
    summ = parsed.group(2)
    name1 = message.from_user.get_mention(as_html=True)
    data = {}
    data["suma"] = summ
    data['user_id'] = message.from_user.id
    balanc = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
    balance = (balanc[0])
    stavka = users.cursor.execute("SELECT stavka from users where id = ?", (message.from_user.id,)).fetchone()
    stavka = (stavka[0])
    invited_users = int((users.cursor.execute("SELECT invited_users from users where id = ?", (message.from_user.id,)).fetchone())[0])
    summ = int(summ)
    if message.chat.type == 'private':
        if balance >= summ:
            if summ <= int(stavka):
                bot_data = await bot.send_dice(message.chat.id, emoji='üèÄ')
                bot_data = bot_data['dice']['value']
                await sleep(4)
                if bot_data >= 4:
                    await message.reply(f'üèÄ‚úÖ | –í—ã –ø–æ–ø–∞–ª–∏ –ø—Ä—è–º–æ –≤ –∫–æ–ª—å—Ü–æ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{summ * (1 + (0.35 * invited_users))}</b>üí∞', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                        {"suma": summ * (1 + (0.35 * invited_users)), "user_id": message.from_user.id}
                    )
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET basket = basket + 1 WHERE id=?', (message.from_user.id,))
                elif bot_data == 3:
                    await message.reply(f'üèÄ‚ùå | –£–ø—Å... –º—è—á –∑–∞—Å—Ç—Ä—è–ª –≤ –∫–æ–ª—å—Ü–µ, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å.', parse_mode='html')
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET basket = basket + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
                else:
                    await message.reply(f'üèÄ‚ùå | –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{summ}</b>üí∞', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET basket = basket + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
            else:
                await message.reply(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka} üí∞', parse_mode='html')
        elif balance < summ:
            balanc = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
            balance = (balanc[0])
            await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞', parse_mode='html')
    else:
        game_rule = chats.cursor.execute("SELECT game_rule from chats where chat_id = ?", (msg.chat.id,)).fetchone()
        game_rule = (game_rule[0])
        if str(game_rule) == '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ':
            if balance >= summ:
                if summ <= int(stavka):
                    bot_data = await bot.send_dice(message.chat.id, emoji='üèÄ')
                    bot_data = bot_data['dice']['value']
                    await sleep(4)
                    if bot_data >= 4:
                        await message.reply(f'üèÄ‚úÖ | –í—ã –ø–æ–ø–∞–ª–∏ –ø—Ä—è–º–æ –≤ –∫–æ–ª—å—Ü–æ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{summ * (1 + (0.35 * invited_users))}</b>üí∞', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""",
                            {"suma": summ * (1 + (0.35 * invited_users)), "user_id": message.from_user.id}
                        )
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET basket = basket + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                    elif bot_data == 3:
                        await message.reply(f'üèÄ‚ùå | –£–ø—Å... –º—è—á –∑–∞—Å—Ç—Ä—è–ª –≤ –∫–æ–ª—å—Ü–µ, –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å.', parse_mode='html')
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET basket = basket + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                    else:
                        await message.reply(f'üèÄ‚ùå | –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏ –∏ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: <b>{summ}</b>üí∞', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET basket = basket + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                else:
                    await message.reply(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞', parse_mode='html')
            elif balance < summ:
                balance = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
                balance = (balance[0])
                await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞', parse_mode='html')
        else:
            await message.reply(f'üö´ | –í —ç—Ç–æ–º —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏–≥—Ä–∞—Ç—å!')

#–û—Ö–æ—Ç–∞
@rate_limit(limit=1.5)
@dp.message_handler(regexp=r"(^–û—Ö–æ—Ç–∞|–æ—Ö–æ—Ç–∞) ?(\d+)?")
async def nc(message: types.Message):
    name1 = message.from_user.get_mention(as_html=True)
    args = message.text.lower().split()

    if len(args) < 2:
        await message.reply("‚ùé | –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—Ç–∞–≤–∫—É!")
        return

    if int(args[1]) < 1:
        await message.reply("‚ùé | –°—Ç–∞–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω—É–ª—è!")
        return

    summ2 = int(args[1])
    summ3 = int(args[1]) * 2
    summ4 = int(args[1]) * 3

    data = {}
    data["suma"] = int(args[1])
    data['user_id'] = message.from_user.id
    data1 = {}
    data1["suma"] = int(summ2)
    data1['user_id'] = message.from_user.id
    data2 = {}
    data2["suma"] = int(summ3)
    data2['user_id'] = message.from_user.id
    data3 = {}
    data3["suma"] = int(summ4)
    data3['user_id'] = message.from_user.id
    datas = {}
    datas["suma"] = int(args[1]) * 3
    datas['user_id'] = message.from_user.id
    datab = {}
    datab["suma"] = int(args[1]) * 1.5
    datab['user_id'] = message.from_user.id

    cnb = ['–ó–∞—è—Ü', '–í–æ–ª–∫', '–ú–µ–¥–≤–µ–¥—å', '–ú–∏–º–æ', '–î—è–¥—è –°—Ç—ë–ø–∞', '–ë–æ–ª—å–Ω–∏—Ü–∞']
    game = random.choice(cnb)
    balance = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
    balance = (balance[0])
    stavka = users.cursor.execute("SELECT stavka from users where id = ?", (message.from_user.id,)).fetchone()
    stavka = (stavka[0])
    if message.chat.type == 'private':
        if int(args[1]) <= int(stavka):
            if int(balance) >= int(args[1]):
                gg = await message.reply(f'üí• | –í—ã—Å—Ç—Ä–µ–ª... –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤ –∫–æ–≥–æ –≤—ã –ø–æ–ø–∞–ª–∏')
                await sleep(3)
                if game == '–ó–∞—è—Ü':
                    await gg.edit_text(f'üí•üê∞ | –û—Ç–ª–∏—á–Ω–æ!\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ –∑–∞–π—Ü–∞, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: <b>{summ2}</b>üí∞', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data1)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET ohota = ohota + 1 WHERE id=?', (message.from_user.id,))
                elif game == '–í–æ–ª–∫':
                    await gg.edit_text(f'üí•üê∫ | –û—Ç–ª–∏—á–Ω–æ!\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ –≤–æ–ª–∫–∞, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: <b>{summ3}</b>üí∞', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data2)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET ohota = ohota + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
                elif game == '–ú–µ–¥–≤–µ–¥—å':
                    await gg.edit_text(f'üí•üêª | –û—Ç–ª–∏—á–Ω–æ!\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–¥–≤–µ–¥—è, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: <b>{summ4}</b>üí∞', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data3)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET ohota = ohota + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
                elif game == '–ú–∏–º–æ':
                    await gg.edit_text(f'üí•‚ùé | –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏... –î–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å', parse_mode='html')
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET ohota = ohota + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
                elif game == '–î—è–¥—è –°—Ç—ë–ø–∞':
                    await gg.edit_text(f'üí•üò≤ | –Å–∫–∞—Ä–∞–Ω—ã–π –±–∞–±–∞–π!\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ —Å–≤–æ–µ–≥–æ —Å–æ—Å–µ–¥–∞ –¥—è–¥—é –°—Ç—ë–ø—É, –ø–ª–∞—Ç–∏—Ç–µ: <b>{int(args[1]) * 3}</b>üí∞, –∑–∞ –µ–≥–æ –ª–µ—á–µ–Ω–∏–µ', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", datas)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET ohota = ohota + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
                elif game == '–ë–æ–ª—å–Ω–∏—Ü–∞':
                    await gg.edit_text(f'üè•üêø | –ë–µ—à–µ–Ω–Ω–∞—è –±–µ–ª–∫–∞ –ø—Ä–æ–≥—Ä—ã–∑–ª–∞ –≤–∞—à—É –Ω–æ–≥—É!\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ –±–æ–ª—å–Ω–∏—Ü—É –∏ –æ–ø–ª–∞—Ç–∏–ª–∏: <b>{int(args[1]) * 1.5}</b>üí∞ –∑–∞ –ª–µ—á–µ–Ω–∏–µ!', parse_mode='html')
                    users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", datab)
                    users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                    users.cursor.execute(f'UPDATE users SET ohota = ohota + 1 WHERE id=?', (message.from_user.id,))
                    users.connect.commit()
            elif int(balance) < int(args[1]):
                await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞ ', parse_mode='html')
        else:
            await message.reply(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka}üí∞', parse_mode='html')
    else:
        game_rule = chats.cursor.execute("SELECT game_rule from chats where chat_id = ?", (message.chat.id,)).fetchone()
        game_rule = (game_rule[0])
        if str(game_rule) == '—Ä–∞–∑—Ä–µ—à–µ–Ω–æ':
            if int(args[1]) <= int(stavka):
                if int(balance) >= int(args[1]):
                    gg = await message.reply(f'üí• | –í—ã—Å—Ç—Ä–µ–ª... –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤ –∫–æ–≥–æ –≤—ã –ø–æ–ø–∞–ª–∏')
                    if game == '–ó–∞—è—Ü':
                        await sleep(3)
                        await gg.edit_text(f'üí•üê∞ | –û—Ç–ª–∏—á–Ω–æ!\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ –∑–∞–π—Ü–∞, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: <b>{summ2}</b>üí∞', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data1)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET ohota = ohota + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                    elif game == '–í–æ–ª–∫':
                        await sleep(3)
                        await gg.edit_text(f'üí•üê∫ | –û—Ç–ª–∏—á–Ω–æ!\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ –≤–æ–ª–∫–∞, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: <b>{summ3}</b>üí∞', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data2)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET ohota = ohota + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                    elif game == '–ú–µ–¥–≤–µ–¥—å':
                        await sleep(3)
                        await gg.edit_text(f'üí•üêª | –û—Ç–ª–∏—á–Ω–æ!\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–¥–≤–µ–¥—è, –≤–æ—Ç –≤–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: <b>{summ4}</b>üí∞', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data3)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET ohota = ohota + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                    elif game == '–ú–∏–º–æ':
                        await sleep(3)
                        await gg.edit_text(f'üí•‚ùé | –í—ã –ø—Ä–æ–º–∞–∑–∞–ª–∏... –î–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å', parse_mode='html')
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET ohota = ohota + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                    elif game == '–î—è–¥—è –°—Ç—ë–ø–∞':
                        await sleep(3)
                        await gg.edit_text(f'üí•üò≤ | –Å–∫–∞—Ä–∞–Ω—ã–π –±–∞–±–∞–π!\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ —Å–≤–æ–µ–≥–æ —Å–æ—Å–µ–¥–∞ –¥—è–¥—é –°—Ç—ë–ø—É, –ø–ª–∞—Ç–∏—Ç–µ: <b>{int(args[1]) * 3}</b>üí∞, –∑–∞ –µ–≥–æ –ª–µ—á–µ–Ω–∏–µ', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", datas)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET ohota = ohota + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                    elif game == '–ë–æ–ª—å–Ω–∏—Ü–∞':
                        await sleep(3)
                        await gg.edit_text(f'üè•üêø | –ë–µ—à–µ–Ω–Ω–∞—è –±–µ–ª–∫–∞ –ø—Ä–æ–≥—Ä—ã–∑–ª–∞ –≤–∞—à—É –Ω–æ–≥—É!\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ –±–æ–ª—å–Ω–∏—Ü—É –∏ –æ–ø–ª–∞—Ç–∏–ª–∏: <b>{int(args[1]) * 1.5}</b>üí∞ –∑–∞ –ª–µ—á–µ–Ω–∏–µ!', parse_mode='html')
                        users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", datab)
                        users.cursor.execute(f'UPDATE users SET games = games + 1 WHERE id=?', (message.from_user.id,))
                        users.cursor.execute(f'UPDATE users SET ohota = ohota + 1 WHERE id=?', (message.from_user.id,))
                        chats.cursor.execute(f'UPDATE chats SET chat_games = chat_games + 1 WHERE chat_id=?', (message.chat.id,))
                        chats.connect.commit()
                        users.connect.commit()
                elif int(balance) < int(args[1]):
                    await message.reply(f'‚ùé | –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç!\nüí≥ | –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}üí∞ ', parse_mode='html')
            else:
                await message.reply(f'‚ùé | –í–∞—à–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {stavka} üí∞', parse_mode='html')
        else:
            await message.reply(f'üö´ | –í —ç—Ç–æ–º —á–∞—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏–≥—Ä–∞—Ç—å!')

#–ü–æ–ø–æ–ª–Ω–∏—Ç—å
@dp.message_handler(regexp=r"(^–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç|–ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç|^–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç|–ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç) ?(\d+)?")
async def bankplus(message: types.Message):
    balance = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
    balance = (balance[0])
    bank = users.cursor.execute("SELECT bank from users where id = ?", (message.from_user.id,)).fetchone()
    bank = (bank[0])
    command_parse = re.compile(r"(^–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç|–ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç|^–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç|–ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç) ?(\d+)?")
    parsed = command_parse.match(message.text)
    suma = parsed.group(2)
    suma = int(suma)
    data1 = {}
    data1["suma"] = suma
    data1['user_id'] = message.from_user.id
    if int(balance) >= suma:
        users.cursor.execute("""UPDATE users SET bank = bank + :suma WHERE id = :user_id;""", data1)
        users.cursor.execute("""UPDATE users SET balance = balance - :suma WHERE id = :user_id;""", data1)
        await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ —Å–≤–æ–π —Å—á—ë—Ç –Ω–∞ <code>{suma}üí∞</code>", parse_mode='html')
    else:
        await message.reply(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞!", parse_mode='html')

#–°–Ω—è—Ç—å
@dp.message_handler(regexp=r"(^–°–Ω—è—Ç—å —Å–æ —Å—á—ë—Ç–∞|—Å–Ω—è—Ç—å —Å–æ —Å—á—ë—Ç–∞|^–°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞|—Å–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞) ?(\d+)?")
async def bankminus(message: types.Message):
    balance = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
    balance = (balance[0])
    bank = users.cursor.execute("SELECT bank from users where id = ?", (message.from_user.id,)).fetchone()
    bank = (bank[0])
    command_parse = re.compile(r"(^–°–Ω—è—Ç—å —Å–æ —Å—á—ë—Ç–∞|—Å–Ω—è—Ç—å —Å–æ —Å—á—ë—Ç–∞|^–°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞|—Å–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞) ?(\d+)?")
    parsed = command_parse.match(message.text)
    suma = parsed.group(2)
    suma = int(suma)
    data1 = {}
    data1["suma"] = suma
    data1['user_id'] = message.from_user.id
    if int(bank) >= suma:
        users.cursor.execute("""UPDATE users SET balance = balance + :suma WHERE id = :user_id;""", data1)
        users.cursor.execute("""UPDATE users SET bank = bank - :suma WHERE id = :user_id;""", data1)
        await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ <code>{suma}üí∞</code> —Å–æ —Å—á—ë—Ç–∞!", parse_mode='html')
    else:
        await message.reply(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É!", parse_mode='html')

#–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
@dp.message_handler()
async def echo_message(message: types.Message):
    #–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞
    msg = message
    chat_id = msg.chat.id
    chat_name = msg.chat.title
    chat_username = msg.chat.username
    now = datetime.now()
    reg_data = now.strftime("%d.%m.%Y")
    chat_status = "–û–±—ã—á–Ω—ã–π"
    game_rule = "—Ä–∞–∑—Ä–µ—à–µ–Ω–æ"
    chat_rules = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    mod_cmd = '–¥–∞'
    rules = "–ù–µ —É–∫–∞–∑–∞–Ω—ã!"
    welcome = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!"
    chats.cursor.execute(f"SELECT chat_id FROM chats WHERE chat_id = '{chat_id}'")
    if message.chat.type == 'supergroup':
        if chats.cursor.fetchone() is None:
            chats.cursor.execute("INSERT INTO chats VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", (chat_id, chat_name, chat_username, game_rule, 0, reg_data, chat_status, chat_rules, mod_cmd, rules, welcome))
            await bot.send_message(config.owner, f'#–ù–û–í–´–ô_–ß–ê–¢\nüë• –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_name}\nüìé –°—Å—ã–ª–∫–∞: @{chat_username}\n‚úÖ ID: <code>{chat_id}</code>')
            chats.connect.commit()
        else:
            pass
    else:
        pass

    if message.text.lower() in ["–ë", "–±", "–ë–∞–ª–∞–Ω—Å", "–±–∞–ª–∞–Ω—Å", "üí∞", "–ú–æ–∏ üí∞", "–º–æ–∏ üí∞", "–ú–æ–π üí∞", "–º–æ–π üí∞"]:
        id = message.from_user.id
        users.cursor.execute(f"SELECT id from users WHERE id = '{id}'")
        if users.cursor.fetchone() is None:
            await message.reply(f'–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í–≤–µ–¥–∏—Ç–µ /start')
        else:
            if message.reply_to_message:
                name2 = message.reply_to_message.from_user.get_mention(as_html=True)
                balance = users.cursor.execute("SELECT balance from users where id = ?", (message.reply_to_message.from_user.id,)).fetchone()
                balance = (balance[0])
                bank = users.cursor.execute("SELECT bank from users where id = ?", (message.reply_to_message.from_user.id,)).fetchone()
                bank = (bank[0])
                x1 = '{:,}'.format(balance)
                x2 = '{:,}'.format(bank)
                await message.answer(f'üë§ | {name2}\nüí∞ | –ë–∞–ª–∞–Ω—Å: <code>{x1}</code>\nüè¶ | –ë–∞–Ω–∫: <code>{x2}</code>')
            else:
                name1 = message.from_user.get_mention(as_html=True)
                balance = users.cursor.execute("SELECT balance from users where id = ?", (message.from_user.id,)).fetchone()
                balance = (balance[0])
                bank = users.cursor.execute("SELECT bank from users where id = ?", (message.from_user.id,)).fetchone()
                bank = (bank[0])
                x1 = '{:,}'.format(balance)
                x2 = '{:,}'.format(bank)
                await message.answer(f'üë§ | {name1}\nüí∞ | –ë–∞–ª–∞–Ω—Å: <code>{x1}</code>\nüè¶ | –ë–∞–Ω–∫: <code>{x2}</code>')

    #–¢–æ–ø –±–æ–≥–∞—á–µ–π
    elif message.text.lower() in ["–¢–æ–ø –±", "—Ç–æ–ø –±", "–ë–æ–≥–∞—á–∏", "–±–æ–≥–∞—á–∏", "–¢–æ–ø üí∞", "—Ç–æ–ø üí∞"]:
        top15 = users.cursor.execute('SELECT name, balance FROM users WHERE balance IS NOT Null and status IS NOT "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" and status IS NOT "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞" ORDER BY balance DESC LIMIT 15').fetchall()
        table = []
        for num, (fname, x) in enumerate(top15, 1):
            table.append(f'{num}. {fname} ‚Äì {x}üí∞\n' )
        await message.answer('üìäüí∞ | –¢–æ–ø 15 –±–æ–≥–∞—á–µ–π –±–æ—Ç–∞:\n'+''.join(table), parse_mode='html', disable_web_page_preview=True)

    #–¢–æ–ø —Ö—É—ë–≤
    elif message.text.lower() in ["–¢–æ–ø —Ö", "—Ç–æ–ø —Ö", "–¢–æ–ø —Ö—É—ë–≤", "—Ç–æ–ø —Ö—É—ë–≤"]:
        top15 = users.cursor.execute('SELECT name, dick FROM users WHERE dick IS NOT Null and status IS NOT "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" and status IS NOT "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞" ORDER BY dick DESC LIMIT 15').fetchall()
        table = []
        for num, (fname, x) in enumerate(top15, 1):
            table.append(f'{num}. {fname} ‚Äì {x} —Å–º.\n' )
        await message.answer('üìäüçÜ | –¢–æ–ø 15 —è–ª–¥–∞–∫–æ–≤ –±–æ—Ç–∞:\n'+''.join(table), parse_mode='markdown', disable_web_page_preview=True)

    #–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
    elif message.text.lower() in ["–¢–æ–ø –∏", "—Ç–æ–ø –∏", "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "–¢–æ–ø üéÆ", "—Ç–æ–ø üéÆ"]:
        top15 = users.cursor.execute('SELECT name, games FROM users WHERE games IS NOT Null and status IS NOT "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" and status IS NOT "–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞" ORDER BY games DESC LIMIT 15').fetchall()
        table = []
        for num, (fname, x) in enumerate(top15, 1):
            table.append(f'{num}. {fname} - {x}\n' )
        await message.answer('üìäüéÆ | –¢–æ–ø 15 –∏–≥—Ä–æ–∫–æ–≤ –±–æ—Ç–∞:\n'+''.join(table), parse_mode='html', disable_web_page_preview=True)


###–ó–ê–ü–£–°–ö###
if __name__ == "__main__":
    dp.middleware.setup(ThrottlingMiddleware())
    executor.start_polling(dp, skip_updates=True)
